{"version":3,"file":"moiki-exporter.modern.js","sources":["../src/migration-utils.js","../node_modules/lodash.kebabcase/index.js","../src/utils.js","../src/ink/index.js","../src/inform/inform6-utils.js","../src/inform/index.js","../src/inform/inform6.js"],"sourcesContent":["const CURRENT_SCHEMA_VERSION = 3\n\nexport const migrate = (story) => {\n  const storyVersion = story.meta.version || 1\n  story.meta.version = CURRENT_SCHEMA_VERSION\n  switch (storyVersion) {\n    case 1: return fromV1(story)\n    case 2: return fromV2(story)\n    default: return fromV3(story)\n  }\n}\n\nconst fromCommon = (story) => {\n  const {_id, meta, firstSequence, sequences, themes=[], assets=[], sounds=[], counters=[], textvars=[], images=[], socialClub=null} = story\n  return {\n    _id,\n    meta,\n    themes,\n    firstSequence: firstSequence || (sequences && sequences.length > 0 ? sequences[0].id : 'intro'),\n    sequences: sequences && sequences.length > 0 ? sequences : [{\n      id: 'intro',\n      content: ''\n    }],\n    counters,\n    textvars,\n    assets,\n    sounds,\n    images\n  }\n}\n\nconst fromV3 = (story) => {\n  return fromCommon(story)\n}\n\nconst fromV2 = (story) => {\n  const converted = fromCommon(story)\n  return {\n    ...converted,\n    themes: [\n      { ...story.theme, identifier: 'default', idName: 'default'}\n    ]\n  }\n}\n\nconst fromV1 = (story) => {\n  const converted = fromCommon(story)\n  return {\n    ...converted,\n    meta: {\n      ...converted.meta,\n      simplified: true\n    },\n    themes: [\n      { ...story.theme, identifier: 'default', idName: 'default'}\n    ],\n    sequences: converted.sequences.map((s) => {\n      const {_doc} = s\n      const {action, condition, ...seq} = (_doc || s)\n      if (action && action.params) {\n        seq.actions = [{\n          kind: 'object',\n          params: {\n            target: action.params,\n            modifier: 'toggle'\n          }\n        }]\n      }\n      if (condition && condition.params && condition.next) {\n        seq.conditions = [{\n          kind: 'object',\n          query: {\n            params: [{\n              target: condition.params,\n              condition: 'with'\n            }]\n          },\n          next: condition.next\n        }]\n      }\n      if (seq.choices && seq.choices.length > 0) {\n        seq.choices = seq.choices.map((c) => {\n          const {_doc:chDoc} = c\n          const {action:chAction, condition:chCond, ...ch} = (chDoc || c)\n          if (chAction && chAction.params) {\n            ch.actions = [{\n              kind: 'object',\n              params: {\n                target: chAction.params,\n                modifier: 'toggle'\n              }\n            }]\n          }\n          if (chCond && chCond.params && chCond.next) {\n            ch.conditions = [{\n              kind: 'object',\n              query: {\n                params: [{\n                  target: chCond.params,\n                  condition: 'with'\n                }]\n              },\n              next: chCond.next\n            }]\n          }\n          return ch\n        })\n      }\n      return seq\n    })\n  }\n}","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = kebabCase;\n","const getDate = () => {\n  const dateOptions = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  }\n  return new Date().toLocaleDateString('en-US', dateOptions)\n}\n\nexport const getHeader = (storyId) => (\n`This story was created with Moiki, and converted with Moiki-Exporter\nMore info: https://github.com/kaelhem/moiki-exporter\nLaunch it with the Moiki player: https://moiki.fr/story/${storyId}\nExported on ${getDate()}`\n)\n\nexport const getAuthor = (story) => {\n  if (story && story.author) {\n    const { firstname, lastname, pseudo } = story.author\n    return pseudo ? pseudo : firstname + ' ' + lastname\n  }\n  return 'Inconnu'\n}\n\n/*\n  This WTF function allow to chain simple sequences as it was one.\n  It returns an array of sequences with this added attributes :\n    * chain: array of chained sequences (this one included)\n    * chainedContent: an array with either : \n      + cumulated text of the chained sequences (as strings)\n      + object that corresponding to won objects\n      ex.: ['text of several sequences', {sequenceAction}, 'text of following sequences']\n\n  /!\\ this method is destructive for the sequences object pass in. You should use a deep copy to keep your data untouched.\n*/\nexport const simplifyStory = ({sequences, firstSequence}, vars, cleanTextFn) => {\n  const tree = {}\n\n  const addLink = (id, to, isBackLink=false) => {\n    if (!tree[id]) {\n      tree[id] = {in: [], to: []}\n    }\n    if (!isBackLink) {\n      tree[id].to.push(to)\n      addLink(to, id, true)\n    } else {\n      tree[id].in.push(to)\n    }\n  }\n\n  const allSequencesById = {}\n\n  for (let s of sequences) {\n    allSequencesById[s.id] = s\n    if (s.choices && s.choices.length > 0) {\n      for (let choice of s.choices) {\n        choice.content = cleanTextFn(choice.content)\n        if (choice.conditions && choice.conditions.length > 0) {\n          for (let cond of choice.conditions) {\n            if (cond.next) {\n              addLink(s.id, cond.next)\n            }\n          }\n        }\n        if (choice.next) {\n          addLink(s.id, choice.next)\n        }\n      }\n    } else {\n      if (s.conditions && s.conditions.length > 0) {\n        for (let cond of s.conditions) {\n          if (cond.next) {\n            addLink(s.id, cond.next)\n          }\n        }\n      }\n      if (s.next) {\n        addLink(s.id, s.next)\n      }\n    }\n  }\n  \n  const chapters = [allSequencesById[firstSequence]]\n  const treeArray = Object.entries(tree).map(([index, data]) => ({data, index}))\n  for (let node of treeArray) {\n    if ((node.data.in.length > 1 || (node.data.in.length === 1 && tree[node.data.in[0]].to.length > 1)) && node.index !== firstSequence) {\n      chapters.push(allSequencesById[node.index])\n    }\n  }\n  for (let chap of chapters) {\n    let currentId = chap.id\n    const chain = [allSequencesById[currentId]]\n    while (tree[currentId].to.length === 1) {\n      currentId = tree[currentId].to[0]\n      chain.push(allSequencesById[currentId])\n    }\n    chap.chain = chain\n\n    const chainWithActions = []\n    for (let node of chain) {\n      chainWithActions.push(node)\n      if (node.actions && node.actions.length === 1 && node.actions[0] && node.actions[0].params) {\n        chainWithActions.push({objectAction: vars[node.actions[0].params.target], kind: node.actions[0].kind})\n      }\n    }\n    const chainSum = []\n    let contentSum = ''\n    for (let chainObj of chainWithActions) {\n      if (chainObj.objectAction) {\n        if (contentSum) {\n          chainSum.push(contentSum.replace(/(\\s)*<br(\\s)*\\/>(\\s)*/gi, '\\u000D\\u000A').trim())\n          contentSum = ''\n        }\n        chainSum.push({...chainObj.objectAction, actionKind: chainObj.kind})\n      } else {\n        contentSum += cleanTextFn(chainObj.content) + ' '\n      }\n    }\n    if (contentSum) {\n      chainSum.push(contentSum.replace(/(\\s)*<br(\\s)*\\/>(\\s)*/gi, '\\u000D\\u000A').trim())\n    }\n    chap.chainedContent = chainSum\n  }\n  chapters.forEach(seq => {\n    seq.chain = seq.chain.map(({chain, chainedContent, ...rest}) => ({...rest}))\n  })\n  return chapters\n}","import kebabCase from 'lodash.kebabcase'\nimport { getHeader, getAuthor } from '../utils'\n\nconst convertId = id => id.replace(/-/gi, '_')\nconst cleanContent = content => {\n  return content\n    .replace(/(<(strong|b)>\\s)/gi, ' <b>')\n    .replace(/(\\s<\\/(strong|b)>)/gi, '</b> ')\n    .replace(/(<em>\\s)/gi, ' <em>')\n    .replace(/(\\s<\\/em>)/gi, '</em> ')\n    .replace(/<\\/p>/gi, '</p> ')\n    .replace(/(<([/p]+)>)/gi, '')\n    .replace(/(<([/]*)(span)>)/gi, '')\n    .replace(/<span class=\"ql-cursor\">/gi, '')\n    .replace(/&nbsp;/gi, ' ')\n    .replace(/\\u200C/gi, '')\n    .replace(/(\\s)+/gi, ' ')\n    .replace(/@@_xx_LF_@@/gi, '\\n') //@@_xx_LF_@@\n    .trim()\n}\n\nconst INDENT = '  '\n\nexport const convertToInk = (story) => {\n  const { _id, meta, firstSequence, sequences, assets=[], counters=[], textvars=[] } = story\n\n  let objectVariables = {}\n  for (let asset of assets) {\n    objectVariables[asset.id] = {\n      inkVar: '_object_' + convertId(kebabCase(asset.label)),\n      ...asset\n    }\n  }\n\n  let counterVariables = {}\n  for (let counter of counters) {\n    counterVariables[counter.id] = {\n      inkVar: '_counter_' + convertId(kebabCase(counter.name)),\n      ...counter\n    }\n  }\n\n  let textvarVariables = {}\n  for (let textvar of textvars) {\n    textvarVariables[textvar.id] = {\n      inkVar: '_textvar_' + convertId(kebabCase(textvar.name)),\n      ...textvar\n    }\n  }\n\n  const convertContentVars = (s) => {\n    const regex = /<span class=\"ql-moikivar\"([^<]+)<\\/span>/gim\n    const regexId = /data-var-id=\"([A-Za-z0-9-]+)\" data-var-op=\"([a-z]+)\"/\n    const replacers = []\n  \n    let matches\n    while ((matches = regex.exec(s)) !== null) {\n      const foundId = matches[0].match(regexId)\n      if (foundId && foundId.length > 1) {\n        const counter = counterVariables[foundId[1]] //allCounters.find(x => x.id === foundId[1]) || story.counters[foundId[1]]\n        const textvar = textvarVariables[foundId[1]] //allTextvars.find(x => x.id === foundId[1]) || story.textvars[foundId[1]]\n        const op = foundId[2] || 'value'\n        let value = ''\n        if (counter) {\n          switch (op) {\n            case 'percent': {\n              value = `{INT((FLOAT(${counter.inkVar} - ${counter.inkVar}_min) / FLOAT(${counter.inkVar}_max - ${counter.inkVar}_min)) * 100)}%`\n              break\n            }\n            default: {\n              value = `{${counter.inkVar}}`\n            }\n          }\n        } else if (textvar) {\n          switch (op) {\n            case 'random': {\n              value = `<>@@_xx_LF_@@~${textvar.inkVar}_func(RANDOM(0, ${textvar.values.length-1}))@@_xx_LF_@@<>`\n              break\n            }\n            default: {\n              value = `{${textvar.inkVar}}`\n            }\n          }\n        }\n        replacers.push({from: matches[0], to: value})\n      }\n    }\n    let converted = s\n    for (let i=0; i<replacers.length; ++i) {\n      converted = converted.replace(replacers[i].from, replacers[i].to)\n    }\n    return converted\n  }\n\n  const convertObjectCondition = (condition, target) => {\n    const {inkVar} = objectVariables[target]\n    switch (condition) {\n      case 'with': return inkVar\n      case 'without': return `not ${inkVar}`\n      default: console.warn('This type of object condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertCounterCondition = (condition, target, value, valueType) => {\n    const {inkVar} = counterVariables[target]\n    let condValue = value\n    if (valueType === 'counter') {\n      condValue = counterVariables[value].inkVar\n    } else {\n      if (isNaN(value) || typeof value !== 'number') {\n        console.warn('The value of this counter condition is invalid:', value)\n        return null\n      }\n    }\n    switch (condition) {\n      case '=': {\n        return `${inkVar} == ${condValue}`\n      }\n      case '!=': case '<': case '<=': case '>': case '>=': {\n        return `${inkVar} ${condition} ${condValue}`\n      }\n      default: console.warn('This type of counter condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertTextvarCondition = (condition, target, value) => {\n    const {inkVar, values, name} = textvarVariables[target]\n    const {text} = values.find(x => x.id === value) || {text: name}\n    switch (condition) {\n      case '=': {\n        return `${inkVar} == \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`\n      }\n      case '!=': {\n        return `${inkVar} ${condition} \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`\n      }\n      default: console.warn('This type of textvar condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertPassageCondition = (condition, target) => {\n    switch (condition) {\n      case 'by': return `${convertId(target)}`\n      case 'not-by': return `not ${convertId(target)}`\n      default: console.warn('This type of passage condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertMultipleCondition = (allConditions) => {\n    const res = []\n    for (let c of allConditions) {\n      const {kind, condition, target, value} = c\n      res.push(convertCondition(kind, [{condition, target, value, valueType}]))\n    }\n    return res.filter(x => x !== null)\n  }\n\n  const convertCondition = (kind, params, operator) => {\n    const [{condition, target, value, valueType}] = params\n    switch (kind) {\n      case 'object': return convertObjectCondition(condition, target)\n      case 'counter': return convertCounterCondition(condition, target, value, valueType)\n      case 'textvar': return convertTextvarCondition(condition, target, value)\n      case 'passage': return convertPassageCondition(condition, target)\n      case 'multiple': {\n        const multiCond = convertMultipleCondition(params)\n        return multiCond && multiCond.length > 0 ? multiCond.join(operator === 'and' ? ' && ' : ' || ') : null\n      }\n      default: {\n        console.warn('This kind of condition is unknown:', kind)\n      }\n    }\n  }\n\n  const addConditions = (conditions, defaultNext, newLine=false) => {\n    const inkConditions = conditions.map(c => {\n      const {kind, next, query: {params, operator=null}} = c\n      const cond = convertCondition(kind, params, operator)\n      return {cond, next}\n    })\n    let strConditions = null\n    if (inkConditions && inkConditions.length > 0) {\n      strConditions = [...inkConditions, {cond: 'else', next: defaultNext}]\n        .map(({cond, next}) => `- ${cond}:\\n${INDENT}-> ${convertId(next)}`)\n        .join('\\n')\n        .replace(/\\n/g, `\\n${INDENT}`)\n    }\n    const lf = newLine ? '\\n' : ''\n    return strConditions ? `${lf}{\\n${INDENT}${strConditions}\\n}\\n` : `-> ${convertId(defaultNext)} \\n`\n  }\n\n  const convertObjectAction = ({target, modifier}) => {\n    const {inkVar, label, desc} = objectVariables[target]\n    switch (modifier) {\n      case 'toggle': {\n        return [\n          `~ ${inkVar} = !${inkVar}`,\n          `{ ${inkVar}:`,\n          `${INDENT}<em>Objet récupéré : ${label} - \"${desc}\"</em>`,\n          `- else:`,\n          `${INDENT}<em>Objet perdu : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      case 'add': {\n        return [\n          `{ not ${inkVar}:`,\n          `${INDENT}~ ${inkVar} = true`,\n          `${INDENT}<em>Objet récupéré : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      case 'sub': {\n        return [\n          `{ ${inkVar}:`,\n          `${INDENT}~ ${inkVar} = false`,\n          `${INDENT}<em>Objet perdu : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertCounterAction = ({target, modifier, value, valueType}) => {\n    const {inkVar, name, gauge} = counterVariables[target]\n    let condValue = value\n    if (valueType === 'counter') {\n      condValue = counterVariables[value].inkVar\n    }\n    switch (modifier) {\n      case 'set': {\n        const defaultAction = [`~ ${inkVar} = ${condValue}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} vaut maintenant : {${condValue}}</em>`\n        ] : defaultAction\n      }\n      case 'add': {\n        const defaultAction = [`~ ${inkVar} += ${condValue}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} augmente de {${condValue}} et vaut maintenant : {${inkVar}}</em>`\n        ] : defaultAction\n      }\n      case 'sub': {\n        const defaultAction = [`~ ${inkVar} -= ${condValue}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} diminue de {${condValue}} et vaut maintenant : {${inkVar}}</em>`\n        ] : defaultAction\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertTextvarAction = ({target, modifier, value}) => {\n    const {inkVar, values, name} = textvarVariables[target]\n    const { text } = values.find(x => x.id === value) || {text: name}\n    switch (modifier) {\n      case 'set': {\n        return [`~ ${inkVar} = \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`]\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertAction = ({kind, params}) => {\n    switch (kind) {\n      case 'object': return convertObjectAction(params)\n      case 'counter': return convertCounterAction(params)\n      case 'textvar' : return convertTextvarAction(params)\n      default: {\n        console.warn('This kind of action is unknown:', kind)\n      }\n    }\n  }\n\n  const addActions = (actions) => {\n    const listActions = []\n    for (let act of actions) {\n      const action = convertAction(act)\n      action && listActions.push(action.join('\\n'))\n    }\n    if (listActions && listActions.length > 0) {\n      return listActions.join('\\n') + '\\n'\n    }\n    return null\n  }\n  \n  let result = `/*\n${getHeader(_id)}\n*/\n\n# author: ${getAuthor(meta)}\n# title: ${meta.name}\n`\n  if (meta.image) {\n    result += `# IMAGE: ${meta.image.replace(/\\//gi, '\\\\/')}\n<em>Crédit photo : <a href=\"${'https://unsplash.com'.replace(/\\//gi, '\\\\/')}\">Unsplash</a></em>\n`\n  }\n  result += '<em>' + meta.description + '</em>\\n<hr/>\\n'\n\n  const objectVarsAsArray = Object.entries(objectVariables).map(([_, data]) => data)\n  for (let {inkVar} of objectVarsAsArray) {\n    result += 'VAR ' + inkVar + ' = false\\n'\n  }\n  const counterVarsAsArray = Object.entries(counterVariables).map(([_, data]) => data)\n  for (let {inkVar, defaultValue=0, min, max} of counterVarsAsArray) {\n    result += `VAR ${inkVar} = ${defaultValue}\\n`\n    result += `VAR ${inkVar}_min = ${min}\\n`\n    result += `VAR ${inkVar}_max = ${max}\\n`\n  }\n\n  const textvarVarsAsArray = Object.entries(textvarVariables).map(([_, data]) => data)\n  for (let {inkVar, name,  values=[]} of textvarVarsAsArray) {\n    const v = ((values && values.length) > 0 ? values[0].text : name).replace(/\\\"/g, '\\\\\\\"')\n    result += `VAR ${inkVar} = \"${v}\"\\n`\n  }\n\n  result += '\\n-> ' + convertId(firstSequence) + '\\n'\n\n  for (let sequence of sequences) {\n    const text = cleanContent(convertContentVars(sequence.content))\n    result += '\\n=== ' + convertId(sequence.id) + ' ===\\n'\n    result += text + '\\n'\n    if (sequence.puzzle) {\n      // TODO !\n    } else if (sequence.choices && sequence.choices.length > 0) {\n      for (let choice of sequence.choices) {\n        let actions = ' '\n        if (choice.actions && choice.actions.length > 0) {\n          actions = addActions(choice.actions)\n        }\n        let prefix = '+ '\n        if (choice.showCondition && choice.showCondition.kind) {\n          const {kind, query: {params, operator=null}} = choice.showCondition\n          prefix += '{' + convertCondition(kind, params, operator) + '} '\n        }\n        let choiceContent = prefix + '[' + cleanContent(convertContentVars(choice.content)) + ']\\n' + actions\n        if (choice.conditions && choice.conditions.length > 0) {\n          result += `${choiceContent} ${addConditions(choice.conditions, choice.next, true)}`\n        } else {\n          result += choiceContent + '-> ' + convertId(choice.next) + '\\n'\n        }\n      }\n      result += '# CLEAR\\n'\n    } else {\n      if (sequence.actions && sequence.actions.length > 0) {\n        result += addActions(sequence.actions)\n      }\n      if (sequence.conditions && sequence.conditions.length > 0) {\n        result += addConditions(sequence.conditions, sequence.next)\n      } else if (sequence.next) {\n        result += '-> ' + convertId(sequence.next) + '\\n'\n      } else {\n        result += '-> END\\n'\n      }\n    }\n  }\n\n  // writing functions to access textvars as list\n  for (let {inkVar, values=[]} of textvarVarsAsArray) {\n    let varValues = ''\n    let idx = 0\n    for (let val of values) {\n      varValues += `\\n\\t- ${idx}: ${val.text}`\n      ++idx\n    }\n    result += `\\n\\n=== function ${inkVar}_func(val)\\n{ val:${varValues}\\n}`\n  }\n\n  return result\n}\n","export const convertId = (id, prefix = 'story') => {\n  if (!id) {\n    return null\n  }\n  const pre = prefix ? prefix + '_' : ''\n  return pre + id.replace(/-/gi, '_')\n}\n\nexport const cleanContent = (content) => {\n  return content\n    .replace(/<span class=\"ql-moikivar\"([^<]+)<\\/span>/gim, '<data class=\"ql-moikivar\"$1<\\/data>')\n    .replace(/\\u200C/gim, '')\n    .replace(/(<\\/*(strong|b)>)/gi, '')\n    .replace(/(<\\/*(em)>)/gi, '')\n    .replace(/(<\\/*(h\\d)>)/gi, '')\n    .replace(/<span class=\"ql-cursor\">/gi, '')\n    .replace(/<\\/p>/gi, '</p> ')\n    .replace(/<\\/*p>/gi, '')\n    .replace(/(<\\/*(span)>)/gi, '')\n    .replace(/(\\s)+/gi, ' ')\n    .replace(/©/gim, '(c)')\n    .replace(/@/gim, '@@64')\n    .replace(/\\^/gim, '@@94')\n    .replace(/\\\\/gim, '@@92')\n    .replace(/~/gim, '@@126')\n    .replace(/°/gim, ' ') // FIXME! the @@225 code seems to not work (even with the \"Zcharacter table + '@{00B0}';\" directive)\n    .replace(/\\s*<br\\s*\\/*>(\\s|&nbsp;)*/gi, '^')\n    .replace(/(\\s)*&nbsp;(\\s)*/gi, ' ') // maybe: [unicode 160] ?\n    .replace(/(\"|“|”)/gim, '~')\n    .replace(/’/gim, '\\'')\n    .replace(/…/gim, '...')\n    .trim()\n}\n\nexport const escapeText = (s) => {\n  return s\n    .replace(/~/gim, '@@126')\n    .replace(/(\"|“|”)/gim, '~')\n}\n\nexport const informDefaultSettings = {\n  lang: 'fr',\n  encoding: 'utf8',\n  asciiOnly: true,\n  clsPattern: '--', // used in v3 as separator (because the lack of clear screen function)\n  disablePauseOnActions: false,\n  disablePauseOnSimpleSequence: false,\n  disablePauseOnGameOver: false,\n  disableClearScreenOnChoice: false,\n  preferSeparatorThanCls: false\n}\n\nexport const DEFAULT_STRINGS_FR = {\n  HEADER: 'Cette histoire a été exportée avec Moiki Exporter.^La version originelle est accessible ici :',\n  MOIKI_PRESENTS: 'Moiki présente :',\n  A_STORY_BY: 'Une histoire de',\n  COLON: ' :',\n  CMD_HELP: 'AIDE',\n  CMD_UNDO: 'RETOUR',\n  CMD_REDO: 'REFAIRE',\n  CMD_LIST: 'LISTE',\n  CMD_SHOW: 'REVOIR',\n  CMD_EXIT: 'QUITTER',\n  CMD_YES: 'oui',\n  CMD_YES_SHORT: 'o',\n  CMD_NO: 'non',\n  CMD_NO_SHORT: 'n',\n  NOCHOICE_MATCH: 'Cette saisie ne correspond à aucun choix !',\n  LIST_OF_COMMANDS: 'Liste des commandes',\n  //BACK_TO_PREVIOUS: 'Retourner au choix précédent',\n  RESTART_GAME: 'Recommencer depuis le début',\n  LIST_OBJECTS: 'Lister les objets récupérés',\n  RESHOW_TEXT: 'Afficher le texte de la dernière séquence',\n  QUIT: 'Quitter',\n  BYE_BYE: 'Bye-bye !',\n  CONFIRM_RESTART: 'Recommencer depuis le début ?',\n  INVENTORY_LIST: `Liste des objets de l'inventaire :`,\n  INVENTORY_EMPTY: 'Votre inventaire est vide !',\n  OBJECT_WON: 'Objet récupéré : ',\n  OBJECT_LOST: 'Objet perdu : ',\n  COUNTER_SET: ' vaut maintenant : ',\n  COUNTER_ADD: ' augmente de ',\n  COUNTER_SUB: ' diminue de ',\n  WIN_GAME: 'Gagné !',\n  LOSE_GAME: 'Perdu !',\n  COMMAND_UNKNOWN_LEFT: 'Cette commande est inconnue ! Tapez ~',\n  COMMAND_UNKNOWN_RIGHT: '~ pour une liste des commandes disponibles.',\n  DEFAULT_CONFIRM_MSG: `Etes-vous sûr de vouloir faire cette action ?`,\n  AND: 'et',\n  OR: 'ou',\n  PLEASE_ANSWER: `Veuillez répondre par `,\n  ANOTHER_GAME: `Lancer une autre partie ?`\n}\n\nexport const DEFAULT_STRINGS_EN = {\n  HEADER: 'This story was exported with Moiki Exporter.^The original version is avalaible here:',\n  MOIKI_PRESENTS: 'Moiki presents :',\n  A_STORY_BY: 'A story by',\n  COLON: ':',\n  CMD_HELP: 'HELP',\n  CMD_UNDO: 'UNDO',\n  CMD_REDO: 'REDO',\n  CMD_LIST: 'LIST',\n  CMD_SHOW: 'SHOW',\n  CMD_EXIT: 'EXIT',\n  CMD_YES: 'yes',\n  CMD_YES_SHORT: 'y',\n  CMD_NO: 'no',\n  CMD_NO_SHORT: 'n',\n  NOCHOICE_MATCH: 'This entry does not correspond to any choice!',\n  LIST_OF_COMMANDS: 'List of commands',\n  //BACK_TO_PREVIOUS: 'Back to previous choice',\n  RESTART_GAME: 'Restart the game',\n  LIST_OBJECTS: 'List of items won',\n  RESHOW_TEXT: 'Show the text of the last sequence',\n  QUIT: 'Quit the game',\n  BYE_BYE: 'Bye bye!',\n  CONFIRM_RESTART: 'Restart from the beginning?',\n  INVENTORY_LIST: `List of items in inventory:`,\n  INVENTORY_EMPTY: 'Inventory is empty!',\n  OBJECT_WON: 'Item won : ',\n  OBJECT_LOST: 'Item lost : ',\n  COUNTER_SET: ' is now: ',\n  COUNTER_ADD: ' increases by ',\n  COUNTER_SUB: ' decreases by ',\n  WIN_GAME: 'Won!',\n  LOSE_GAME: 'Lost!',\n  COMMAND_UNKNOWN_LEFT: 'This command is unknown! Type ~',\n  COMMAND_UNKNOWN_RIGHT: '~ for a list of available commands.',\n  DEFAULT_CONFIRM_MSG: `Are you sure you want to take this action?`,\n  AND: 'and',\n  OR: 'or',\n  PLEASE_ANSWER: `Please answer `,\n  ANOTHER_GAME: `Start another game?`\n}\n\nexport const stringsForItems = ['INVENTORY_EMPTY', 'INVENTORY_LIST', 'CMD_LIST', 'LIST_OBJECTS', 'OBJECT_WON', 'OBJECT_LOST']\n\nexport const SPECIAL_CHARS = ['…', 'ō', '⨭', '⨮', '☼', '¤', '×', '♦', '█', '■', '▄', '▲', '▓', '♥', '◄']","import { convertToInform6 } from './inform6'\n\nexport * as inform6Utils from './inform6-utils'\n\nexport const convertToInform = (story, format, options) => {\n  if (format === 'inform6') {\n    return convertToInform6(story, options)\n  }\n  throw new Error('This format is unvailable!')\n}","/**\nThis export will not use any extra library, just Inform (that means, there is no parser).\n*/\n\nimport kebabCase from 'lodash.kebabcase'\nimport { getHeader, getAuthor } from '../utils'\nimport * as informUtils from './inform6-utils'\n\nexport const convertToInform6 = (story, opts={}) => {\n  const { _id, meta, firstSequence, sequences, assets={}, counters={}, textvars={} } = story\n  const { convertId: idConverter, cleanContent: contentCleaner, SPECIAL_CHARS } = informUtils\n  const settings = {...informUtils.informDefaultSettings, ...opts}\n  const STRINGS = {...(settings.lang === 'fr' ? informUtils.DEFAULT_STRINGS_FR : informUtils.DEFAULT_STRINGS_EN), ...(settings.strings || {})}\n\n  const writeStyle = (style, tabs=1) => `#IfV5; style ${style}; #EndIf;\\n${'  '.repeat(tabs)}`\n  const bold = (tabs) => writeStyle('bold', tabs)\n  //const reverse = (tabs) => writeStyle('reverse', tabs)\n  const underline = (tabs) => writeStyle('underline', tabs)\n  const roman = (tabs) => writeStyle('roman', tabs)\n\n  /*\n  @overriding cleanContent\n  This part allows to manage special chars that need to be declared in Ztable\n  */\n  const specialChars = new Set([])\n  const cleanContent = (str) => {\n    const cleaned = contentCleaner(str)\n    let cleanedAndConverted = settings.asciiOnly ? '' : cleaned\n    let charCode\n    for (let chr of cleaned) {\n      charCode = chr.charCodeAt(0)\n      if (charCode > 255 && !settings.asciiOnly) {\n        specialChars.add(charCode.toString(16))\n      } else if (settings.asciiOnly) {\n        if (charCode > 127 && charCode < 255) {\n          specialChars.add(charCode.toString(16))\n          cleanedAndConverted += chr\n        } else {\n          cleanedAndConverted += charCode > 255 ? '?' : chr\n        }\n      }\n    }\n    return cleanedAndConverted\n  }\n  const writeSpecialCharsRoutine = () => {\n    const specialCharsArray = Array.from(specialChars)\n    const zCharTableKind = settings.asciiOnly ? 'Zcharacter table +' : 'Zcharacter table'\n    if (specialCharsArray.length > 0) {\n      return `\\n${zCharTableKind} ${specialCharsArray.map(x => `'@{${x}}'`).join(' ')};\\n`\n    } else {\n      return ''\n    }\n  }\n\n  /*\n  @overriding convertId\n  This part allows to fix issue for names that exceeds the maximum length of 32 characters\n  */\n  const cuttedIds = {}\n  const sliceIndexes = {}\n  const convertId = (id, prefix) => {\n    const convertedId = idConverter(id, prefix)\n    if (convertedId.length >= 20) {\n      if (!cuttedIds[convertedId]) {\n        const slicedId = convertedId.slice(0, 18) + '_C'\n        if (!sliceIndexes[slicedId]) {\n          sliceIndexes[slicedId] = 1\n        } else {\n          sliceIndexes[slicedId] = (sliceIndexes[slicedId] + 1)\n        }\n        cuttedIds[convertedId] = slicedId + sliceIndexes[slicedId]\n      }\n      return cuttedIds[convertedId]\n    }\n    return convertedId\n  }\n\n  const objectVariables = {}\n  for (const [idx, asset] of assets.entries()) {\n    objectVariables[asset.id] = {\n      identifier: '_' + convertId(kebabCase(asset.label), '') + '_' + (idx + 1),\n      ...asset\n    }\n  }\n  const objectVarsAsArray = Object.entries(objectVariables).map(([_, data]) => data)\n\n  const counterVariables = {}\n  for (const [idx, counter] of counters.entries()) {\n    counterVariables[counter.id] = {\n      identifier: '_' + convertId(kebabCase(counter.name), '') + '_' + (idx + 1),\n      value: counter.defaultValue || 0,\n      ...counter\n    }\n  }\n  const counterVarsAsArray = Object.entries(counterVariables).map(([_, data]) => data)\n\n  const textvarVariables = {}\n  for (const [idx, textvar] of textvars.entries()) {\n    textvarVariables[textvar.id] = {\n      identifier: '_' + convertId(kebabCase(textvar.name), '') + '_' + (idx + 1),\n      value: textvar.defaultValue || 0,\n      ...textvar\n    }\n  }\n  const textvarVarsAsArray = Object.entries(textvarVariables).map(([_, data]) => data)\n\n  const extractPassageFromConditions = (conditions) => {\n    const passages = []\n    if (conditions && conditions.length > 0) {\n      for (let c of conditions) {\n        const {kind, query: {params}} = c\n        if (kind === 'passage') {\n          const [{target}] = params\n          passages.push(target)\n        } else if (kind === 'multiple') {\n          for (let p of params) {\n            const {kind, target} = p\n            if (kind === 'passage') {\n              passages.push(target)\n            }\n          }\n        }\n      }\n    }\n    return passages\n  }\n\n  const sequenceUsedInConditions = []\n  for (let sequence of sequences) {\n    if (sequence.choices && sequence.choices.length > 0) {\n      for (let ch of sequence.choices) {\n        sequenceUsedInConditions.push(...extractPassageFromConditions(ch.conditions))\n        if (ch.showCondition && ch.showCondition.kind) {\n          sequenceUsedInConditions.push(...extractPassageFromConditions([ch.showCondition]))\n        }\n      }\n    } else {\n      sequenceUsedInConditions.push(...extractPassageFromConditions(sequence.conditions))\n    }\n  }\n  const uniquePassages = Array.from(new Set(sequenceUsedInConditions))\n  const passageVarsAsArray = uniquePassages.map(x => convertId(x))\n  \n\n  const convertObjectCondition = (condition, target) => {\n    switch (condition) {\n      case 'with': return `hasItem(${objectVariables[target].identifier})`\n      case 'without': return `~~hasItem(${objectVariables[target].identifier})`\n      default: console.warn('This type of object condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertCounterCondition = (condition, target, value, valueType) => {\n    let condValue = value\n    if (valueType === 'counter') {\n      condValue = counterVariables[value].identifier\n    } else {\n      if (isNaN(value) || typeof value !== 'number') {\n        console.warn('The value of this counter condition is invalid:', value)\n        return null\n      }\n    }\n    switch (condition) {\n      case '=': return `${counterVariables[target].identifier} == ${condValue}`\n      case '!=': return `${counterVariables[target].identifier} ~= ${condValue}`\n      case '<': case '<=': case '>': case '>=': {\n        return `${counterVariables[target].identifier} ${condition} ${condValue}`\n      }\n      default: console.warn('This type of counter condition is unknown:', condition)\n    }\n    return null\n  }\n\n\n  const getTextvarValueIndex = (target, value) => {\n    const foundTextvar = textvarVariables[target]\n    if (foundTextvar && foundTextvar.values) {\n      const foundValue = foundTextvar.values.findIndex(x => x.id === value)\n      if (foundValue) {\n        return foundValue + 1\n      }\n    }\n    return 1\n  }\n\n  const convertTextvarCondition = (condition, target, value) => {\n    switch (condition) {\n      case '=': return `${textvarVariables[target].identifier}_VAL == ${getTextvarValueIndex(target, value)}`\n      case '!=': return `${textvarVariables[target].identifier}_VAL ~= ${getTextvarValueIndex(target, value)}`\n      default: console.warn('This type of textvar condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertPassageCondition = (condition, target) => {\n    switch (condition) {\n      case 'by': return `userPassages-->PSG_${convertId(target)} == 1`\n      case 'not-by': return `userPassages-->PSG_${convertId(target)} == 0`\n      default: console.warn('This type of passage condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertMultipleCondition = (allConditions) => {\n    const res = []\n    for (let c of allConditions) {\n      const {kind, condition, target, value, valueType} = c\n      switch (kind) {\n        case 'object': res.push(convertObjectCondition(condition, target)); break\n        case 'counter': res.push(convertCounterCondition(condition, target, value, valueType)); break\n        case 'textvar': res.push(convertTextvarCondition(condition, target, value)); break\n        case 'passage': res.push(convertPassageCondition(condition, target)); break\n        default: {\n          console.warn('This type of multiple condition is unknown:', kind)\n        }\n      }\n    }\n    return res.filter(x => x !== null).map(x => `(${x})`)\n  }\n\n  const convertShowCondition = (showCondition) => {\n    const {kind, query: {operator, params}} = showCondition\n    const [{target, condition, value, valueType}] = params\n    switch (kind) {\n      case 'object': return convertObjectCondition(condition, target)\n      case 'counter': return convertCounterCondition(condition, target, value, valueType)\n      case 'textvar': return convertTextvarCondition(condition, target, value)\n      case 'passage': return convertPassageCondition(condition, target)\n      case 'multiple': {\n        const multiCond = convertMultipleCondition(params)\n        const joiner = operator === 'and' ? ' && ' : ' || '\n        return multiCond ? multiCond.join(joiner) : null\n      }\n      default: {\n        console.warn('This kind of condition is unknown:', kind)\n      }\n    }\n  }\n\n  const convertConditions = (conditions) => {\n    const listConditions = []\n    for (let c of conditions) {\n      const {kind, next, query: {operator, params}} = c\n      const [{target, condition, value, valueType}] = params\n      switch (kind) {\n        case 'object': {\n          const objCondition = convertObjectCondition(condition, target)\n          objCondition && listConditions.push(`if (${objCondition}) return ${convertId(next)};`)\n          break\n        }\n        case 'counter': {\n          const counterCond = convertCounterCondition(condition, target, value, valueType)\n          counterCond && listConditions.push(`if (${counterCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'textvar': {\n          const textvarCond = convertTextvarCondition(condition, target, value)\n          textvarCond && listConditions.push(`if (${textvarCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'passage': {\n          const psgCond = convertPassageCondition(condition, target)\n          psgCond && listConditions.push(`if (${psgCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'multiple': {\n          const multiCond = convertMultipleCondition(params)\n          const joiner = operator === 'and' ? ' && ' : ' || '\n          multiCond && listConditions.push(`if (${multiCond.join(joiner)}) return ${convertId(next)};`)\n          break\n        }\n        default: {\n          console.warn('This kind of condition is unknown:', kind)\n        }\n      }\n    }\n    return listConditions\n  }\n\n  const convertActions = (actions) => {\n    const listActions = []\n    for (let act of actions) {\n      const {kind, params: {target, modifier, value, valueType}} = act\n      switch (kind) {\n        // modifier = toggle, add, sub\n        case 'object': listActions.push(`${modifier}Item(${objectVariables[target].identifier});`); break\n        // modifier = set, add, sub\n        case 'counter': {\n          if (valueType === 'counter') {\n            listActions.push(`${modifier}Counter(${counterVariables[target].identifier}, userCounters-->${counterVariables[value].identifier});`);\n          } else {\n            listActions.push(`${modifier}Counter(${counterVariables[target].identifier}, ${value});`);\n          }\n          break\n        }\n        // modifier = set\n        case 'textvar': listActions.push(`${textvarVariables[target].identifier}_VAL = ${getTextvarValueIndex(target, value)};`); break\n        default: {\n          console.warn('This kind of action is unknown:', kind)\n        }\n      }\n    }\n    return listActions\n  }\n\n  const getChoiceLinkValue = (choice) => {\n    if (choice.actions && choice.actions.length > 0) {\n      return [\n        ...convertActions(choice.actions),\n        `return ${convertId(choice.next)};`\n      ]\n    } else if (choice.conditions && choice.conditions.length > 0) {\n      return [\n        ...convertConditions(choice.conditions),\n        `return ${convertId(choice.next)};`\n      ]\n    } else {\n      return [ \n        `return ${convertId(choice.next)};`\n      ]\n    }\n  }\n\n  const convertContentVars = (s) => {\n    const regex = /<data class=~ql-moikivar~([^<]+)<\\/data>/gim\n    const regexId = /data-var-id=~([A-Za-z0-9-]+)~ data-var-op=~([a-z]+)~/\n    const replacers = []\n  \n    let matches\n    while ((matches = regex.exec(s)) !== null) {\n      const foundId = matches[0].match(regexId)\n      if (foundId && foundId.length > 1) {\n        const counter = counterVariables[foundId[1]] //allCounters.find(x => x.id === foundId[1]) || story.counters[foundId[1]]\n        const textvar = textvarVariables[foundId[1]] //allTextvars.find(x => x.id === foundId[1]) || story.textvars[foundId[1]]\n        const op = foundId[2] || 'value'\n        let value = ''\n        if (counter) {\n          switch (op) {\n            case 'percent': {\n              value = `\", ${counter.identifier}, \"`\n              // TODO : that does not work... (not strange at all)\n              // value = `\";\\n  print ((${counter.identifier} - getCounterMin(${counter.identifier})) / (getCounterMax(${counter.identifier}) - getCounterMin(${counter.identifier}))) * 100;\\n  print \"%`\n              break\n            }\n            default: {\n              value = `\", ${counter.identifier}, \"`\n            }\n          }\n        } else if (textvar) {\n          switch (op) {\n            case 'random': {\n              value = `\";\\n  getTextvarValue(${textvar.identifier}, random(${textvar.identifier}_NUMVALUES));\\n  print \"`\n              break\n            }\n            default: {\n              value = `\";\\n  getTextvarValue(${textvar.identifier}, ${textvar.identifier}_VAL);\\n  print \"`\n            }\n          }\n        }\n        replacers.push({from: matches[0], to: value})\n      }\n    }\n    let converted = s\n    for (let i=0; i<replacers.length; ++i) {\n      converted = converted.replace(replacers[i].from, replacers[i].to)\n    }\n    return converted\n  }\n\n  const getNodeDescription = (sequence) => {\n    let statements = null\n    const listVars = []\n    const text = convertContentVars(cleanContent(sequence.content))\n    if (sequence.puzzle) {\n      listVars.push('code')\n      // puzzle sequence \n      const codesCheck = []\n      for (let code of sequence.puzzle.codes) {\n        codesCheck.push(\n          `if (isCommand(\"${code.value}\")) {`,\n          `  return ${convertId(code.next)};`,\n          `}`\n        )\n      }\n      statements = [\n        `print \"${text}\";`,\n        `code = getInputCode();`,\n        ...codesCheck,\n        `return ${convertId(sequence.puzzle.defaultNext)};`\n      ]\n    } else if (sequence.next && (!sequence.choices || sequence.choices.length === 0)) {\n      // simple sequence\n      if (sequence.actions && sequence.actions.length > 0) {\n        statements = [\n          `print \"${text}^^\";`,\n          ...convertActions(sequence.actions),\n          `return ${convertId(sequence.next)};`\n        ]\n      } else if (sequence.conditions && sequence.conditions.length > 0) {\n        statements = [\n          `print \"${text}\";`,\n          !settings.disablePauseOnSimpleSequence && `wait();`,\n          ...convertConditions(sequence.conditions),\n          `return ${convertId(sequence.next)};`\n        ]\n      } else {\n        statements = [\n          `print \"${text}\";`,\n          !settings.disablePauseOnSimpleSequence && `wait();`,\n          `return ${convertId(sequence.next)};`\n        ]\n      }\n    } else if (sequence.choices && sequence.choices.length > 0) {\n      // choice sequence\n      const choicesDescription = []\n      const choicesLinks = []\n      let mapLinks = []\n      let choiceIndex = 0\n      const hasShowConditions = sequence.choices.filter(c => c.showCondition && c.showCondition.kind).length > 0\n      if (hasShowConditions) {\n        listVars.push('choice', 'numVisibleChoices')\n        for (let choice of sequence.choices) {\n          const choiceContent = convertContentVars(cleanContent(choice.content))\n          const showCond = choice.showCondition && choice.showCondition.kind ? convertShowCondition(choice.showCondition) : false\n          if (showCond) {\n            choicesDescription.push(\n              `if (${showCond}) {`,\n              `  numVisibleChoices = numVisibleChoices + 1;`,\n              `  userChoices-->${(choiceIndex + 1)} = numVisibleChoices;`,\n              `  print \"- (\", numVisibleChoices, \"). ${choiceContent}^\";`,\n              `}`\n            )\n          } else {\n            choicesDescription.push(\n              `numVisibleChoices = numVisibleChoices + 1;`,\n              `userChoices-->${(choiceIndex + 1)} = numVisibleChoices;`,\n              `print \"- (\", numVisibleChoices, \"). ${choiceContent}^\";`\n            )\n          } \n          choicesLinks.push(getChoiceLinkValue(choice))\n          ++choiceIndex\n        }\n        mapLinks = choicesLinks.map((link, i) => `if (choice == userChoices-->${(i + 1)}) {\\n    ${link.join('\\n    ')}\\n  }`)\n        statements = [\n          `numVisibleChoices = 0;`,\n          `print \"${text}^^\";`,\n          ...choicesDescription,\n          `choice = getInputChoice(numVisibleChoices);`,\n          ...mapLinks\n        ]\n      } else {\n        listVars.push('choice')\n        for (let choice of sequence.choices) {\n          const choiceContent = cleanContent(choice.content)\n          choicesDescription.push(`print \"- ${(choiceIndex + 1)}. ${choiceContent}^\";`)\n          choicesLinks.push(getChoiceLinkValue(choice))\n          ++choiceIndex\n        }\n        mapLinks = choicesLinks.map((link, i) => `if (choice == ${ i + 1 }) {\\n    ${link.join('\\n    ')}\\n  }`)\n        statements = [\n          `print \"${text}^^\";`,\n          ...choicesDescription,\n          `choice = getInputChoice(${choicesLinks.length});`,\n          ...mapLinks\n        ]\n      }\n    } else {\n      // final sequence\n      statements = [\n        `print \"${text}^\";`,\n        !settings.disablePauseOnGameOver && `wait();`,\n        `gameOver = ${ sequence.isHappyEnd ? '1' : '2'};`,\n        `return nothing;`\n      ]\n    }\n    const seqId = convertId(sequence.id)\n    if (passageVarsAsArray.includes(seqId)) {\n      statements = [`userPassages-->PSG_${seqId} = 1;`, ...statements]\n    }\n    \n    return {\n      statements: statements.filter(s => !!s).join('\\n  '),\n      vars: listVars\n    }\n  }\n\n  const onAfterChoice = settings.preferSeparatorThanCls ? 'print (string) CLS_PATTERN, \"^\";' : 'cls();'\n\n  const moikiInformLibrary = `! This file contains the necessary core for the Moiki export to Inform6\n! kaelhem (c) 2021\n! kaelhem at gmail com\n\n\n! Inform settings\n! -------------------------------------------\n\nGlobal location = DefaultRoomForStatusBar; ! Must be the first global to show location name\nGlobal status_field_1 = 0; ! Must be the second global to show score or hours\nGlobal status_field_2 = 0; ! Must be the third global to show turns or minutes\n\n! Variables for game management\n! -------------------------------------------\n! Array path --> 10; ! allow 10 undo moves, but it's not implemented yet...\nGlobal markForRedo = 0; ! used to restart game from beginning\nGlobal markForShow = 0; ! used to re-display sequence text\nGlobal gameOver = 0;\n\n#IfV3;\n  Constant ARRAY_LEN_OFFSET = 2;\n#IfNot;\n  Constant ARRAY_LEN_OFFSET = 3;\n#EndIf;\n\n! Choices management (used for visibility conditions of choices)\n! -------------------------------------------\n\nConstant MAX_CHOICES = 6;\nArray userChoices --> (ARRAY_LEN_OFFSET + MAX_CHOICES);\n\n[ clearChoices i;\n  for (i=1: i<=MAX_CHOICES: i++) {\n    userChoices-->i = 0;\n  }\n  return;\n];\n\n${ objectVarsAsArray.length > 0 ? (\n`! Items management\n! -------------------------------------------\n\nArray userItems --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_ITEMS);\n\n[ clearItems i;\n  for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n    userItems-->i = 0;\n  }\n  return;\n];\n\n[ addItem index;\n  if (userItems-->index == 0) {\n    toggleItem(index);\n  }\n  return;\n];\n\n[ subItem index;\n  if (userItems-->index == 1) {\n    toggleItem(index);\n  }\n  return;\n];\n\n[ hasItem index;\n  return userItems-->index == 1;\n];\n\n[ toggleItem index;\n  ${ bold() }if (userItems-->index == 0) {\n    userItems-->index = 1;\n    ++status_field_1;\n    print (string) STR_OBJECT_WON;\n  } else {\n    userItems-->index = 0;\n    --status_field_1;\n    print (string) STR_OBJECT_LOST;\n  }\n  print (string) getItemDescription(index);\n  ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }return;\n];\n\n[ countItems i count;\n  count = 0;\n  for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n    if (userItems-->i == 1) ++count;\n  }\n  return count;\n];\n`) : ''}\n\n${ counterVarsAsArray.length > 0 ? (\n`! Counters management\n! -------------------------------------------\n\nArray userCounters --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_COUNTERS);\n\n[ clearCounters i;\n  for (i=1: i<=COUNT_TOTAL_COUNTERS: i++) {\n    userCounters-->i = defaultCounterValue(i);\n  }\n  return;\n];\n\n[ setCounter index value;\n  userCounters-->index = value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_SET, value;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n\n[ addCounter index value;\n  userCounters-->index = userCounters-->index + value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_ADD, value, \" \", (string) STR_AND, (string) STR_COUNTER_SET, userCounters-->index;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n\n[ subCounter index value;\n  userCounters-->index = userCounters-->index - value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_SUB, value, \" \", (string) STR_AND, (string) STR_COUNTER_SET, userCounters-->index;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n`) : ''}\n\n${ textvarVarsAsArray.length > 0 ? (\n`! Textvars management\n! -------------------------------------------\n\n[ clearTextvars;\n  ${ true && textvarVarsAsArray.map(v => v.identifier + '_VAL = 1;').join('\\n')}\n  return;\n];\n\n`) : ''}\n\n${ passageVarsAsArray.length > 0 ? (\n`! Passages management (for conditions only)\n! -------------------------------------------\n\nArray userPassages --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_PASSAGES);\n\n[ clearPassages i;\n  for (i=1: i<=COUNT_TOTAL_PASSAGES: i++) {\n    userPassages-->i = 0;\n  }\n  return;\n];\n`) : ''}\n\n! Manage user inputs\n! -------------------------------------------\n\n! fix: in z-code v3, input buffers are not formatted the same way...\n#IfV3;\n  Constant arrayStartIndex 1;\n  [ length arr len;\n    len = 0;\n    while (arr->(len+1) ~= 0) ++len;\n    return len;\n  ];\n#Ifnot;\n  Constant arrayStartIndex 2;\n  [ length arr;\n    return arr->1;\n  ];\n#EndIf;\n\n! read user inputs\n[ KeyLine buffer;\n  buffer->0 = 10;\n  read buffer 0;\n  return buffer;\n];\n\n! convert a string into array\n[ toArray str arr;\n  @output_stream 3 arr;\n  @print_paddr str;\n  @output_stream -3;\n  return arr;\n];\n\n! take a char and return the same in lower case\n[ toLowerCase c;\n  if (c >= 'A' && c <= 'Z') return c + 32; else return c;\n];\n\n! return true if the given command as string match the current input buffer\n[isCommand cmd aCmd i;\n  aCmd = toArray(cmd);\n  if (aCmd-->0 == length(key)) {\n    for (i=0: i<aCmd-->0: i++) {\n      if (key->(arrayStartIndex+i) ~= toLowerCase(aCmd->(2+i))) rfalse;\n    }\n    rtrue;\n  }\n  rfalse;\n];\n\n! store user input\nArray key -> 13;\n\n! read user code\n[ getInputCode;\n  do {\n    print \"> \";\n  } until(KeyLine(key)-->0);\n  return key;\n];\n\n! read user choices / menu commands\n[ getInputChoice numChoices len chNum commandUnknown done;\n  done = false;\n  do {\n    commandUnknown = false;\n    do {\n      print \"> \";\n    } until(KeyLine(key)-->0);\n    len = length(key);\n    if (len == 1) {\n      chNum = key->arrayStartIndex - 48;\n      if (chNum > 0 && chNum <= numChoices) {\n        ${ !settings.disableClearScreenOnChoice ? '' + onAfterChoice + '\\n        ' : '' }done = true;\n      } else if (chNum > 0 && chNum <= 10) {\n        print (string) STR_NOCHOICE_MATCH, \"^\";\n      } else {\n        commandUnknown = true;\n      }\n    } else if (isCommand(STR_CMD_HELP)) {\n      showHelp();\n    } else if (isCommand(STR_CMD_UNDO)) {\n      undo();\n    } else if (isCommand(STR_CMD_REDO)) {\n      if (redo()) return 0;\n    } else if (isCommand(STR_CMD_EXIT)) {\n      exit();\n    } else if (isCommand(STR_CMD_SHOW)) {\n      markForShow = 1;\n      return 0;${ objectVarsAsArray.length > 0 ? '\\n    } else if (isCommand(STR_CMD_LIST)) {\\n      inventory();\\n    ' : '' }\n    } else {\n      commandUnknown = true;\n    }\n    if (commandUnknown) {\n      print (string) STR_COMMAND_UNKNOWN_LEFT, (string) STR_CMD_HELP, (string) STR_COMMAND_UNKNOWN_RIGHT, \"^\";\n    }\n  } until(done);\n  return chNum;\n];\n\n[ confirm question ok done;\n  done = false;\n  ok = false;\n  do {\n    do {\n      if (question) {\n        print (string) question;\n      } else {\n        print (string) STR_DEFAULT_CONFIRM_MSG;\n      }\n      print \" (\", (string) STR_CMD_YES, \"/\", (string) STR_CMD_NO, \")^> \";\n    } until(KeyLine(key)-->0);\n    if (isCommand(STR_CMD_YES) || isCommand(STR_CMD_YES_SHORT)) {\n      ok = true;\n      done = true;\n    } else if (isCommand(STR_CMD_NO) || isCommand(STR_CMD_NO_SHORT)) {\n      done = true;\n    }\n    if (~~done) {\n      print (string) STR_PLEASE_ANSWER, (string) STR_CMD_YES, \" \", (string) STR_OR, \" \", (string) STR_CMD_NO,\".^\";\n    }\n  } until(done);\n  return ok;\n];\n\n[ cls;\n  #IfV3;\n    ! in v3 it seems there is no way to clear the screen...\n    print (string) CLS_PATTERN, \"^\";\n  #Ifnot;\n    @erase_window -1; ! this opcode is not available in V3\n  #EndIf;\n  rtrue;\n];\n\n[ wait x;\n  #IfV3;\n    read key 0;\n  #Ifnot;\n    @read_char 1 x; ! this opcode is not available in V3\n    print \"^\";\n  #EndIf;\n];\n\n\n! Menu\n! -------------------------------------------\n\n[ showHelp;\n  ${ underline() }print (string) STR_LIST_OF_COMMANDS, \"^\";\n  ${ roman() }! print \"  - \", (string) STR_CMD_UNDO, (string) STR_COLON, \" \", (string) STR_BACK_TO_PREVIOUS, \"^\";\n  print \"  - \", (string) STR_CMD_REDO, (string) STR_COLON, \" \", (string) STR_RESTART_GAME, \"^\";\n  print \"  - \", (string) STR_CMD_SHOW, (string) STR_COLON, \" \", (string) STR_RESHOW_TEXT, \"^\";\n  print \"  - \", (string) STR_CMD_EXIT, (string) STR_COLON, \" \", (string) STR_QUIT, \"^\";\n  ${ objectVarsAsArray.length > 0 ? 'print \"  - \", (string) STR_CMD_LIST, (string) STR_COLON, \" \", (string) STR_LIST_OBJECTS, \"^\";\\n  ' : '' }rtrue;\n];\n\n[ exit;\n  print (string) STR_BYE_BYE, \"^\";\n  @quit;\n];\n\n[ undo;\n  print \"Undo: not implemented yet !^\";\n  rtrue;\n];\n\n[ redo;\n  if (confirm(STR_CONFIRM_RESTART)) {\n    markForRedo = 1;\n    rtrue;\n  }\n  rfalse;\n];\n${ objectVarsAsArray.length > 0 ? (`\n[ inventory i;\n  if (countItems() == 0) {\n    print (string) STR_INVENTORY_EMPTY, \"^\";\n  } else {\n    ${ underline(2) }print (string) STR_INVENTORY_LIST, \"^\";\n    ${ roman(2) }for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n      if (hasItem(i)) print \"* \", (string) getItemDescription(i), \"^\";\n    }\n  }\n  rtrue;\n];\n`) : '' }\n\n! Presentation\n! -------------------------------------------\n\n[ startScreen;\n  ${ underline() }print (string) STR_HEADER, \" \", (string) STORY_URL, \"^^\";\n  ${ roman() }print (string) STR_MOIKI_PRESENTS, \"^\";\n  ${ bold() }print (string) STORY_TITLE, \"^^\";\n  ${ roman() }print (string) STR_A_STORY_BY, \" \", (string) STORY_AUTHOR, \"^^\", (string) STORY_DESCRIPTION, \"^\";\n  rtrue;\n];\n\n\n! Game loop\n! -------------------------------------------\n[ mainLoop firstSequence next res;\n  next = firstSequence;\n  do {\n    ++status_field_2; ! increase turn counter\n    res = next();\n    if (markForShow == 1) {\n      markForShow = 0;\n      res = next;\n    }\n    if (markForRedo == 1) {\n      res = false;\n    }\n    next = res;\n    print \"^\";\n  } until(~~next);\n  if (gameOver > 0) {\n    ${ bold(2) }if (gameOver == 1) {\n      print (string) STR_WIN_GAME, \"^^\";\n    } else if (gameOver == 2) {\n      print (string) STR_LOSE_GAME, \"^^\";\n    }\n    ${ roman(2) }gameOver = 0;\n  }\n];\n\n[ startGame firstSequence replay;\n  startScreen();\n  wait();\n  do {\n    cls();\n    replay = false;\n    location = DefaultRoomForStatusBar; ! reset location (avoid compiler warning)\n    status_field_1 = 0; ! reset score\n    status_field_2 = 0; ! reset turns\n    ${ objectVarsAsArray.length > 0 ? `clearItems();` : '' }\n    ${ counterVarsAsArray.length > 0 ? `clearCounters();` : '' }\n    ${ textvarVarsAsArray.length > 0 ? `clearTextvars();` : '' }\n    ${ passageVarsAsArray.length > 0 ? `clearPassages();` : '' }\n    mainLoop(firstSequence);\n    if (markForRedo == 1) {\n      markForRedo = 0;\n      replay = true;\n    } else {\n      if (confirm(STR_ANOTHER_GAME)) {\n        replay = true;\n      } else {\n        exit();\n      }\n    }\n  } until(~~replay);\n];\n`\n  const encoding = settings.encoding === 'utf8' ? '!% -Cu\\n' : ''\n  let moikiInformStory = `${encoding}!% -~S\n!% $OMIT_UNUSED_ROUTINES=1\n%%SPECIAL_CHARS%%\n! ${getHeader(_id).split('\\n').join('\\n! ')}\n\n! author: ${getAuthor(meta)}\n! title: ${cleanContent(meta.name)}\n\nObject DefaultRoomForStatusBar \"${cleanContent(meta.name)}\"; ! used to force name in status line\n\n! Constants\n! -------------------------------------------\nConstant STORY_TITLE = \"${cleanContent(meta.name)}\";\nConstant STORY_DESCRIPTION = \"${cleanContent(meta.description)}\";\nConstant STORY_AUTHOR = \"${cleanContent(getAuthor(meta))}\";\nConstant STORY_URL = \"https://moiki.fr/story/${_id}\";\n\n! Strings\n${Object.entries(STRINGS).filter(([key, value]) => {\n  return !(informUtils.stringsForItems.find(s => s === key) && objectVarsAsArray.length === 0)\n}).map(([key, value]) => `Constant STR_${key} = \"${value}\";`).join('\\n')}\n! Config\nConstant CLS_PATTERN = \"${settings.clsPattern.slice(0, 40).repeat(40).slice(0, 40)}\";\n\n${ objectVarsAsArray.length > 0 ? (`\n! Defines objects / heroes\n!-------------------------------------------\nConstant COUNT_TOTAL_ITEMS = ${objectVarsAsArray.length};\n\n${true && objectVarsAsArray.map((v, i) => 'Constant ' + v.identifier + ' = ' + (i + 1) + ';').join('\\n')}\n\n[ getItemDescription index;\n  switch (index) {\n    ${true && objectVarsAsArray.map(v => v.identifier + ': return \"' + cleanContent(v.label) + ' - ~' + cleanContent(v.desc) + '~\";').join('\\n    ')}\n    default: return \"\";\n  }\n];\n\n`) : ''}\n\n${ counterVarsAsArray.length > 0 ? (`\n! Defines counters\n!-------------------------------------------\nConstant COUNT_TOTAL_COUNTERS = ${counterVarsAsArray.length};\n\n${true && counterVarsAsArray.map((v, i) => 'Constant ' + v.identifier + ' = ' + (i + 1) + ';').join('\\n')}\n\n[ getCounterName index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return \"' + v.name + '\";').join('\\n    ')}\n    default: return \"Undefined counter\";\n  }\n];\n\n[ getCounterMin index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + v.min + ';').join('\\n    ')}\n    default: return 0;\n  }\n];\n\n[ getCounterMax index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + v.max + ';').join('\\n    ')}\n    default: return 1;\n  }\n];\n\n[ defaultCounterValue index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + (v.defaultValue || 0) + ';').join('\\n    ')}\n    default: return 0;\n  }\n];\n\n[ isCounterGauge index;\n  switch (index) {\n    ${true && counterVarsAsArray.filter(v => v.gauge).map(v => v.identifier + ': rtrue;').join('\\n    ')}\n    default: return false;\n  }\n];\n\n`) : ''}\n\n${ textvarVarsAsArray.length > 0 ? (`\n! Defines textvars\n!-------------------------------------------\nConstant COUNT_TOTAL_TEXTVARS = ${textvarVarsAsArray.length};\n\n${true && textvarVarsAsArray.map((v, i) => \n  'Constant ' + v.identifier + ' = ' + (i + 1) + ';\\n' +\n  'Constant ' + v.identifier + '_NUMVALUES = ' + v.values.length + ';\\n' + \n  'Global ' + v.identifier + '_VAL = 1;')\n  .join('\\n')\n}\n\n[ getTextvarValue index1 index2;\n  switch (index1) {\n    ${true && textvarVarsAsArray.map((v, i) => (\n      `${v.identifier}:\n      switch (index2) {${v.values.map((val, id) => `\\n        ${(id + 1)}: print \"${informUtils.escapeText(val.text)}\";`).join('')}\n        default: print \"${informUtils.escapeText(v.name)}\";\n      }`\n    ))}\n  }\n];\n\n`) : ''}\n\n${ passageVarsAsArray.length > 0 ? (`\n! Defines passages (used only for conditions)\n!-------------------------------------------\nConstant COUNT_TOTAL_PASSAGES = ${passageVarsAsArray.length};\n\n${true && passageVarsAsArray.map((v, i) => 'Constant PSG_' + v + ' = ' + (i + 1) + ';').join('\\n')}\n\n`) : ''}\n\n! Include MoikInform library\n! ------------------------------------------\nInclude \"moikinform\";\n\n\n! App entry point\n! ------------------------------------------\n[ Main;\n  startGame(${convertId(firstSequence)});\n];\n\n\n! Story sequences\n! ------------------------------------------\n`\n  for (let sequence of sequences) {\n    const { statements, vars } = getNodeDescription(sequence)\n    moikiInformStory += `[ ${convertId(sequence.id)}${vars && vars.length > 0 ? ' ' + vars.join(' ') : ''};\\n  ${statements}\\n];\\n\\n`\n  }\n  return [\n    { filename: 'story.inf', data: moikiInformStory.replace('%%SPECIAL_CHARS%%', writeSpecialCharsRoutine()) },\n    { filename: 'moikinform.h', data: moikiInformLibrary }\n  ]\n}"],"names":["migrate","story","storyVersion","meta","version","fromV1","fromV2","fromV3","fromCommon","_id","firstSequence","sequences","themes","assets","sounds","counters","textvars","images","socialClub","length","id","content","theme","identifier","idName","converted","simplified","map","s","_doc","action","condition","seq","params","actions","kind","target","modifier","next","conditions","query","choices","c","chDoc","chAction","chCond","ch","object","callback","reAsciiWord","reLatin","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsLowerMisc","rsUpperMisc","reOptMod","rsModifier","rsSeq","join","rsEmoji","reApos","RegExp","reComboMark","reUnicodeWord","reHasUnicodeWord","freeSelf","self","Object","root","global","Function","deburrLetter","À","Á","Â","Ã","Ä","Å","à","á","â","ã","ä","å","Ç","ç","Ð","ð","È","É","Ê","Ë","è","é","ê","ë","Ì","Í","Î","Ï","ì","í","î","ï","Ñ","ñ","Ò","Ó","Ô","Õ","Ö","Ø","ò","ó","ô","õ","ö","ø","Ù","Ú","Û","Ü","ù","ú","û","ü","Ý","ý","ÿ","Æ","æ","Þ","þ","ß","Ā","Ă","Ą","ā","ă","ą","Ć","Ĉ","Ċ","Č","ć","ĉ","ċ","č","Ď","Đ","ď","đ","Ē","Ĕ","Ė","Ę","Ě","ē","ĕ","ė","ę","ě","Ĝ","Ğ","Ġ","Ģ","ĝ","ğ","ġ","ģ","Ĥ","Ħ","ĥ","ħ","Ĩ","Ī","Ĭ","Į","İ","ĩ","ī","ĭ","į","ı","Ĵ","ĵ","Ķ","ķ","ĸ","Ĺ","Ļ","Ľ","Ŀ","Ł","ĺ","ļ","ľ","ŀ","ł","Ń","Ņ","Ň","Ŋ","ń","ņ","ň","ŋ","Ō","Ŏ","Ő","ō","ŏ","ő","Ŕ","Ŗ","Ř","ŕ","ŗ","ř","Ś","Ŝ","Ş","Š","ś","ŝ","ş","š","Ţ","Ť","Ŧ","ţ","ť","ŧ","Ũ","Ū","Ŭ","Ů","Ű","Ų","ũ","ū","ŭ","ů","ű","ų","Ŵ","ŵ","Ŷ","ŷ","Ÿ","Ź","Ż","Ž","ź","ż","ž","Ĳ","ĳ","Œ","œ","ŉ","ſ","key","undefined","objectToString","prototype","toString","Symbol","symbolProto","symbolToString","value","isObjectLike","call","isSymbol","result","baseToString","word","index","toLowerCase","string","array","iteratee","accumulator","initAccum","arrayReduce","pattern","guard","test","hasUnicodeWord","match","unicodeWords","asciiWords","words","replace","deburr","getHeader","storyId","Date","toLocaleDateString","weekday","year","month","day","hour","minute","second","getAuthor","author","firstname","lastname","pseudo","vars","cleanTextFn","tree","addLink","to","isBackLink","in","push","allSequencesById","choice","cond","chapters","treeArray","entries","data","node","chap","currentId","chain","chainWithActions","objectAction","chainSum","contentSum","chainObj","trim","actionKind","chainedContent","forEach","convertId","cleanContent","convertToInk","objectVariables","asset","inkVar","kebabCase","label","counterVariables","counter","name","textvarVariables","textvar","convertContentVars","regex","regexId","replacers","matches","exec","foundId","op","values","from","i","convertMultipleCondition","allConditions","res","convertCondition","valueType","filter","x","operator","console","warn","convertObjectCondition","condValue","isNaN","convertCounterCondition","text","find","convertTextvarCondition","convertPassageCondition","multiCond","addConditions","defaultNext","newLine","inkConditions","strConditions","convertAction","desc","convertObjectAction","gauge","defaultAction","convertCounterAction","convertTextvarAction","addActions","listActions","act","image","description","objectVarsAsArray","_","counterVarsAsArray","defaultValue","min","max","textvarVarsAsArray","sequence","puzzle","prefix","showCondition","choiceContent","varValues","idx","val","escapeText","informDefaultSettings","lang","encoding","asciiOnly","clsPattern","disablePauseOnActions","disablePauseOnSimpleSequence","disablePauseOnGameOver","disableClearScreenOnChoice","preferSeparatorThanCls","DEFAULT_STRINGS_FR","HEADER","MOIKI_PRESENTS","A_STORY_BY","COLON","CMD_HELP","CMD_UNDO","CMD_REDO","CMD_LIST","CMD_SHOW","CMD_EXIT","CMD_YES","CMD_YES_SHORT","CMD_NO","CMD_NO_SHORT","NOCHOICE_MATCH","LIST_OF_COMMANDS","RESTART_GAME","LIST_OBJECTS","RESHOW_TEXT","QUIT","BYE_BYE","CONFIRM_RESTART","INVENTORY_LIST","INVENTORY_EMPTY","OBJECT_WON","OBJECT_LOST","COUNTER_SET","COUNTER_ADD","COUNTER_SUB","WIN_GAME","LOSE_GAME","COMMAND_UNKNOWN_LEFT","COMMAND_UNKNOWN_RIGHT","DEFAULT_CONFIRM_MSG","AND","OR","PLEASE_ANSWER","ANOTHER_GAME","DEFAULT_STRINGS_EN","stringsForItems","convertToInform","format","options","opts","idConverter","contentCleaner","informUtils","settings","STRINGS","strings","writeStyle","style","tabs","repeat","bold","underline","roman","specialChars","Set","str","cleaned","charCode","cleanedAndConverted","chr","charCodeAt","add","cuttedIds","sliceIndexes","convertedId","slicedId","slice","extractPassageFromConditions","passages","p","sequenceUsedInConditions","passageVarsAsArray","Array","getTextvarValueIndex","foundTextvar","foundValue","findIndex","convertShowCondition","joiner","convertConditions","listConditions","objCondition","counterCond","textvarCond","psgCond","convertActions","getChoiceLinkValue","getNodeDescription","statements","listVars","codesCheck","code","codes","choicesDescription","choicesLinks","mapLinks","choiceIndex","showCond","link","isHappyEnd","seqId","includes","onAfterChoice","moikiInformLibrary","v","moikiInformStory","split","filename","specialCharsArray","writeSpecialCharsRoutine","convertToInform6","Error"],"mappings":"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"}