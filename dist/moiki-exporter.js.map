{"version":3,"file":"moiki-exporter.js","sources":["../src/migration-utils.js","../node_modules/lodash.kebabcase/index.js","../src/utils.js","../src/ink/index.js","../src/inform/inform6-utils.js","../src/inform/index.js","../src/inform/inform6.js"],"sourcesContent":["const CURRENT_SCHEMA_VERSION = 3\n\nexport const migrate = (story) => {\n  const storyVersion = story.meta.version || 1\n  story.meta.version = CURRENT_SCHEMA_VERSION\n  switch (storyVersion) {\n    case 1: return fromV1(story)\n    case 2: return fromV2(story)\n    default: return fromV3(story)\n  }\n}\n\nconst fromCommon = (story) => {\n  const {_id, meta, firstSequence, sequences, themes=[], assets=[], sounds=[], counters=[], textvars=[], images=[], socialClub=null} = story\n  return {\n    _id,\n    meta,\n    themes,\n    firstSequence: firstSequence || (sequences && sequences.length > 0 ? sequences[0].id : 'intro'),\n    sequences: sequences && sequences.length > 0 ? sequences : [{\n      id: 'intro',\n      content: ''\n    }],\n    counters,\n    textvars,\n    assets,\n    sounds,\n    images\n  }\n}\n\nconst fromV3 = (story) => {\n  return fromCommon(story)\n}\n\nconst fromV2 = (story) => {\n  const converted = fromCommon(story)\n  return {\n    ...converted,\n    themes: [\n      { ...story.theme, identifier: 'default', idName: 'default'}\n    ]\n  }\n}\n\nconst fromV1 = (story) => {\n  const converted = fromCommon(story)\n  return {\n    ...converted,\n    meta: {\n      ...converted.meta,\n      simplified: true\n    },\n    themes: [\n      { ...story.theme, identifier: 'default', idName: 'default'}\n    ],\n    sequences: converted.sequences.map((s) => {\n      const {_doc} = s\n      const {action, condition, ...seq} = (_doc || s)\n      if (action && action.params) {\n        seq.actions = [{\n          kind: 'object',\n          params: {\n            target: action.params,\n            modifier: 'toggle'\n          }\n        }]\n      }\n      if (condition && condition.params && condition.next) {\n        seq.conditions = [{\n          kind: 'object',\n          query: {\n            params: [{\n              target: condition.params,\n              condition: 'with'\n            }]\n          },\n          next: condition.next\n        }]\n      }\n      if (seq.choices && seq.choices.length > 0) {\n        seq.choices = seq.choices.map((c) => {\n          const {_doc:chDoc} = c\n          const {action:chAction, condition:chCond, ...ch} = (chDoc || c)\n          if (chAction && chAction.params) {\n            ch.actions = [{\n              kind: 'object',\n              params: {\n                target: chAction.params,\n                modifier: 'toggle'\n              }\n            }]\n          }\n          if (chCond && chCond.params && chCond.next) {\n            ch.conditions = [{\n              kind: 'object',\n              query: {\n                params: [{\n                  target: chCond.params,\n                  condition: 'with'\n                }]\n              },\n              next: chCond.next\n            }]\n          }\n          return ch\n        })\n      }\n      return seq\n    })\n  }\n}","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @example\n *\n * _.kebabCase('Foo Bar');\n * // => 'foo-bar'\n *\n * _.kebabCase('fooBar');\n * // => 'foo-bar'\n *\n * _.kebabCase('__FOO_BAR__');\n * // => 'foo-bar'\n */\nvar kebabCase = createCompounder(function(result, word, index) {\n  return result + (index ? '-' : '') + word.toLowerCase();\n});\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = kebabCase;\n","const getDate = () => {\n  const dateOptions = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  }\n  return new Date().toLocaleDateString('en-US', dateOptions)\n}\n\nexport const getHeader = (storyId) => (\n`This story was created with Moiki, and converted with Moiki-Exporter\nMore info: https://github.com/kaelhem/moiki-exporter\nLaunch it with the Moiki player: https://moiki.fr/story/${storyId}\nExported on ${getDate()}`\n)\n\nexport const getAuthor = (story) => {\n  if (story && story.author) {\n    const { firstname, lastname, pseudo } = story.author\n    return pseudo ? pseudo : firstname + ' ' + lastname\n  }\n  return 'Inconnu'\n}\n\n/*\n  This WTF function allow to chain simple sequences as it was one.\n  It returns an array of sequences with this added attributes :\n    * chain: array of chained sequences (this one included)\n    * chainedContent: an array with either : \n      + cumulated text of the chained sequences (as strings)\n      + object that corresponding to won objects\n      ex.: ['text of several sequences', {sequenceAction}, 'text of following sequences']\n\n  /!\\ this method is destructive for the sequences object pass in. You should use a deep copy to keep your data untouched.\n*/\nexport const simplifyStory = ({sequences, firstSequence}, vars, cleanTextFn) => {\n  const tree = {}\n\n  const addLink = (id, to, isBackLink=false) => {\n    if (!tree[id]) {\n      tree[id] = {in: [], to: []}\n    }\n    if (!isBackLink) {\n      tree[id].to.push(to)\n      addLink(to, id, true)\n    } else {\n      tree[id].in.push(to)\n    }\n  }\n\n  const allSequencesById = {}\n\n  for (let s of sequences) {\n    allSequencesById[s.id] = s\n    if (s.choices && s.choices.length > 0) {\n      for (let choice of s.choices) {\n        choice.content = cleanTextFn(choice.content)\n        if (choice.conditions && choice.conditions.length > 0) {\n          for (let cond of choice.conditions) {\n            if (cond.next) {\n              addLink(s.id, cond.next)\n            }\n          }\n        }\n        if (choice.next) {\n          addLink(s.id, choice.next)\n        }\n      }\n    } else {\n      if (s.conditions && s.conditions.length > 0) {\n        for (let cond of s.conditions) {\n          if (cond.next) {\n            addLink(s.id, cond.next)\n          }\n        }\n      }\n      if (s.next) {\n        addLink(s.id, s.next)\n      }\n    }\n  }\n  \n  const chapters = [allSequencesById[firstSequence]]\n  const treeArray = Object.entries(tree).map(([index, data]) => ({data, index}))\n  for (let node of treeArray) {\n    if ((node.data.in.length > 1 || (node.data.in.length === 1 && tree[node.data.in[0]].to.length > 1)) && node.index !== firstSequence) {\n      chapters.push(allSequencesById[node.index])\n    }\n  }\n  for (let chap of chapters) {\n    let currentId = chap.id\n    const chain = [allSequencesById[currentId]]\n    while (tree[currentId].to.length === 1) {\n      currentId = tree[currentId].to[0]\n      chain.push(allSequencesById[currentId])\n    }\n    chap.chain = chain\n\n    const chainWithActions = []\n    for (let node of chain) {\n      chainWithActions.push(node)\n      if (node.actions && node.actions.length === 1 && node.actions[0] && node.actions[0].params) {\n        chainWithActions.push({objectAction: vars[node.actions[0].params.target], kind: node.actions[0].kind})\n      }\n    }\n    const chainSum = []\n    let contentSum = ''\n    for (let chainObj of chainWithActions) {\n      if (chainObj.objectAction) {\n        if (contentSum) {\n          chainSum.push(contentSum.replace(/(\\s)*<br(\\s)*\\/>(\\s)*/gi, '\\u000D\\u000A').trim())\n          contentSum = ''\n        }\n        chainSum.push({...chainObj.objectAction, actionKind: chainObj.kind})\n      } else {\n        contentSum += cleanTextFn(chainObj.content) + ' '\n      }\n    }\n    if (contentSum) {\n      chainSum.push(contentSum.replace(/(\\s)*<br(\\s)*\\/>(\\s)*/gi, '\\u000D\\u000A').trim())\n    }\n    chap.chainedContent = chainSum\n  }\n  chapters.forEach(seq => {\n    seq.chain = seq.chain.map(({chain, chainedContent, ...rest}) => ({...rest}))\n  })\n  return chapters\n}","import kebabCase from 'lodash.kebabcase'\nimport { getHeader, getAuthor } from '../utils'\n\nconst convertId = id => id.replace(/-/gi, '_')\nconst cleanContent = content => {\n  return content\n    .replace(/(<(strong|b)>\\s)/gi, ' <b>')\n    .replace(/(\\s<\\/(strong|b)>)/gi, '</b> ')\n    .replace(/(<em>\\s)/gi, ' <em>')\n    .replace(/(\\s<\\/em>)/gi, '</em> ')\n    .replace(/<\\/p>/gi, '</p> ')\n    .replace(/(<([/p]+)>)/gi, '')\n    .replace(/(<([/]*)(span)>)/gi, '')\n    .replace(/<span class=\"ql-cursor\">/gi, '')\n    .replace(/&nbsp;/gi, ' ')\n    .replace(/\\u200C/gi, '')\n    .replace(/(\\s)+/gi, ' ')\n    .replace(/@@_xx_LF_@@/gi, '\\n') //@@_xx_LF_@@\n    .trim()\n}\n\nconst INDENT = '  '\n\nexport const convertToInk = (story) => {\n  const { _id, meta, firstSequence, sequences, assets=[], counters=[], textvars=[] } = story\n\n  let objectVariables = {}\n  for (let asset of assets) {\n    objectVariables[asset.id] = {\n      inkVar: '_object_' + convertId(kebabCase(asset.label)),\n      ...asset\n    }\n  }\n\n  let counterVariables = {}\n  for (let counter of counters) {\n    counterVariables[counter.id] = {\n      inkVar: '_counter_' + convertId(kebabCase(counter.name)),\n      ...counter\n    }\n  }\n\n  let textvarVariables = {}\n  for (let textvar of textvars) {\n    textvarVariables[textvar.id] = {\n      inkVar: '_textvar_' + convertId(kebabCase(textvar.name)),\n      ...textvar\n    }\n  }\n\n  const convertContentVars = (s) => {\n    const regex = /<span class=\"ql-moikivar\"([^<]+)<\\/span>/gim\n    const regexId = /data-var-id=\"([A-Za-z0-9-]+)\" data-var-op=\"([a-z]+)\"/\n    const replacers = []\n  \n    let matches\n    while ((matches = regex.exec(s)) !== null) {\n      const foundId = matches[0].match(regexId)\n      if (foundId && foundId.length > 1) {\n        const counter = counterVariables[foundId[1]] //allCounters.find(x => x.id === foundId[1]) || story.counters[foundId[1]]\n        const textvar = textvarVariables[foundId[1]] //allTextvars.find(x => x.id === foundId[1]) || story.textvars[foundId[1]]\n        const op = foundId[2] || 'value'\n        let value = ''\n        if (counter) {\n          switch (op) {\n            case 'percent': {\n              value = `{INT((FLOAT(${counter.inkVar} - ${counter.inkVar}_min) / FLOAT(${counter.inkVar}_max - ${counter.inkVar}_min)) * 100)}%`\n              break\n            }\n            default: {\n              value = `{${counter.inkVar}}`\n            }\n          }\n        } else if (textvar) {\n          switch (op) {\n            case 'random': {\n              value = `<>@@_xx_LF_@@~${textvar.inkVar}_func(RANDOM(0, ${textvar.values.length-1}))@@_xx_LF_@@<>`\n              break\n            }\n            default: {\n              value = `{${textvar.inkVar}}`\n            }\n          }\n        }\n        replacers.push({from: matches[0], to: value})\n      }\n    }\n    let converted = s\n    for (let i=0; i<replacers.length; ++i) {\n      converted = converted.replace(replacers[i].from, replacers[i].to)\n    }\n    return converted\n  }\n\n  const convertObjectCondition = (condition, target) => {\n    const {inkVar} = objectVariables[target]\n    switch (condition) {\n      case 'with': return inkVar\n      case 'without': return `not ${inkVar}`\n      default: console.warn('This type of object condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertCounterCondition = (condition, target, value) => {\n    const {inkVar} = counterVariables[target]\n    if (isNaN(value) || typeof value !== 'number') {\n      console.warn('The value of this counter condition is invalid:', value)\n      return null\n    }\n    switch (condition) {\n      case '=': {\n        return `${inkVar} == ${value}`\n      }\n      case '!=': case '<': case '<=': case '>': case '>=': {\n        return `${inkVar} ${condition} ${value}`\n      }\n      default: console.warn('This type of counter condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertTextvarCondition = (condition, target, value) => {\n    const {inkVar, values, name} = textvarVariables[target]\n    const {text} = values.find(x => x.id === value) || {text: name}\n    switch (condition) {\n      case '=': {\n        return `${inkVar} == \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`\n      }\n      case '!=': {\n        return `${inkVar} ${condition} \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`\n      }\n      default: console.warn('This type of textvar condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertPassageCondition = (condition, target) => {\n    switch (condition) {\n      case 'by': return `${convertId(target)}`\n      case 'not-by': return `not ${convertId(target)}`\n      default: console.warn('This type of passage condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertMultipleCondition = (allConditions) => {\n    const res = []\n    for (let c of allConditions) {\n      const {kind, condition, target, value} = c\n      res.push(convertCondition(kind, [{condition, target, value}]))\n    }\n    return res.filter(x => x !== null)\n  }\n\n  const convertCondition = (kind, params, operator) => {\n    const [{condition, target, value}] = params\n    switch (kind) {\n      case 'object': return convertObjectCondition(condition, target)\n      case 'counter': return convertCounterCondition(condition, target, value)\n      case 'textvar': return convertTextvarCondition(condition, target, value)\n      case 'passage': return convertPassageCondition(condition, target)\n      case 'multiple': {\n        const multiCond = convertMultipleCondition(params)\n        return multiCond && multiCond.length > 0 ? multiCond.join(operator === 'and' ? ' && ' : ' || ') : null\n      }\n      default: {\n        console.warn('This kind of condition is unknown:', kind)\n      }\n    }\n  }\n\n  const addConditions = (conditions, defaultNext, newLine=false) => {\n    const inkConditions = conditions.map(c => {\n      const {kind, next, query: {params, operator=null}} = c\n      const cond = convertCondition(kind, params, operator)\n      return {cond, next}\n    })\n    let strConditions = null\n    if (inkConditions && inkConditions.length > 0) {\n      strConditions = [...inkConditions, {cond: 'else', next: defaultNext}]\n        .map(({cond, next}) => `- ${cond}:\\n${INDENT}-> ${convertId(next)}`)\n        .join('\\n')\n        .replace(/\\n/g, `\\n${INDENT}`)\n    }\n    const lf = newLine ? '\\n' : ''\n    return strConditions ? `${lf}{\\n${INDENT}${strConditions}\\n}\\n` : `-> ${convertId(defaultNext)} \\n`\n  }\n\n  const convertObjectAction = ({target, modifier}) => {\n    const {inkVar, label, desc} = objectVariables[target]\n    switch (modifier) {\n      case 'toggle': {\n        return [\n          `~ ${inkVar} = !${inkVar}`,\n          `{ ${inkVar}:`,\n          `${INDENT}<em>Objet récupéré : ${label} - \"${desc}\"</em>`,\n          `- else:`,\n          `${INDENT}<em>Objet perdu : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      case 'add': {\n        return [\n          `{ not ${inkVar}:`,\n          `${INDENT}~ ${inkVar} = true`,\n          `${INDENT}<em>Objet récupéré : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      case 'sub': {\n        return [\n          `{ ${inkVar}:`,\n          `${INDENT}~ ${inkVar} = false`,\n          `${INDENT}<em>Objet perdu : ${label} - \"${desc}\"</em>`,\n          `}`\n        ]\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertCounterAction = ({target, modifier, value}) => {\n    const {inkVar, name, gauge} = counterVariables[target]\n    switch (modifier) {\n      case 'set': {\n        const defaultAction = [`~ ${inkVar} = ${value}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} vaut maintenant : ${value}</em>`\n        ] : defaultAction\n      }\n      case 'add': {\n        const defaultAction = [`~ ${inkVar} += ${value}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} augmente de ${value} et vaut maintenant : {${inkVar}}</em>`\n        ] : defaultAction\n      }\n      case 'sub': {\n        const defaultAction = [`~ ${inkVar} -= ${value}`]\n        return gauge ? [\n          ...defaultAction,\n          `<em>${name} diminue de ${value} et vaut maintenant : {${inkVar}}</em>`\n        ] : defaultAction\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertTextvarAction = ({target, modifier, value}) => {\n    const {inkVar, values, name} = textvarVariables[target]\n    const { text } = values.find(x => x.id === value) || {text: name}\n    switch (modifier) {\n      case 'set': {\n        return [`~ ${inkVar} = \"${text.replace(/\\\"/g, '\\\\\\\"')}\"`]\n      }\n      default: console.warn('This action modifier is unknown:', modifier)\n    }\n    return null\n  }\n\n  const convertAction = ({kind, params}) => {\n    switch (kind) {\n      case 'object': return convertObjectAction(params)\n      case 'counter': return convertCounterAction(params)\n      case 'textvar' : return convertTextvarAction(params)\n      default: {\n        console.warn('This kind of action is unknown:', kind)\n      }\n    }\n  }\n\n  const addActions = (actions) => {\n    const listActions = []\n    for (let act of actions) {\n      const action = convertAction(act)\n      action && listActions.push(action.join('\\n'))\n    }\n    if (listActions && listActions.length > 0) {\n      return listActions.join('\\n') + '\\n'\n    }\n    return null\n  }\n  \n  let result = `/*\n${getHeader(_id)}\n*/\n\n# author: ${getAuthor(meta)}\n# title: ${meta.name}\n`\n  if (meta.image) {\n    result += `# IMAGE: ${meta.image.replace(/\\//gi, '\\\\/')}\n<em>Crédit photo : <a href=\"${'https://unsplash.com'.replace(/\\//gi, '\\\\/')}\">Unsplash</a></em>\n`\n  }\n  result += '<em>' + meta.description + '</em>\\n<hr/>\\n'\n\n  const objectVarsAsArray = Object.entries(objectVariables).map(([_, data]) => data)\n  for (let {inkVar} of objectVarsAsArray) {\n    result += 'VAR ' + inkVar + ' = false\\n'\n  }\n  const counterVarsAsArray = Object.entries(counterVariables).map(([_, data]) => data)\n  for (let {inkVar, defaultValue=0, min, max} of counterVarsAsArray) {\n    result += `VAR ${inkVar} = ${defaultValue}\\n`\n    result += `VAR ${inkVar}_min = ${min}\\n`\n    result += `VAR ${inkVar}_max = ${max}\\n`\n  }\n\n  const textvarVarsAsArray = Object.entries(textvarVariables).map(([_, data]) => data)\n  for (let {inkVar, name,  values=[]} of textvarVarsAsArray) {\n    const v = ((values && values.length) > 0 ? values[0].text : name).replace(/\\\"/g, '\\\\\\\"')\n    result += `VAR ${inkVar} = \"${v}\"\\n`\n  }\n\n  result += '\\n-> ' + convertId(firstSequence) + '\\n'\n\n  for (let sequence of sequences) {\n    const text = cleanContent(convertContentVars(sequence.content))\n    result += '\\n=== ' + convertId(sequence.id) + ' ===\\n'\n    result += text + '\\n'\n    if (sequence.puzzle) {\n      // TODO !\n    } else if (sequence.choices && sequence.choices.length > 0) {\n      for (let choice of sequence.choices) {\n        let actions = ' '\n        if (choice.actions && choice.actions.length > 0) {\n          actions = addActions(choice.actions)\n        }\n        let prefix = '+ '\n        if (choice.showCondition && choice.showCondition.kind) {\n          const {kind, query: {params, operator=null}} = choice.showCondition\n          prefix += '{' + convertCondition(kind, params, operator) + '} '\n        }\n        let choiceContent = prefix + '[' + cleanContent(convertContentVars(choice.content)) + ']\\n' + actions\n        if (choice.conditions && choice.conditions.length > 0) {\n          result += `${choiceContent} ${addConditions(choice.conditions, choice.next, true)}`\n        } else {\n          result += choiceContent + '-> ' + convertId(choice.next) + '\\n'\n        }\n      }\n      result += '# CLEAR\\n'\n    } else {\n      if (sequence.actions && sequence.actions.length > 0) {\n        result += addActions(sequence.actions)\n      }\n      if (sequence.conditions && sequence.conditions.length > 0) {\n        result += addConditions(sequence.conditions, sequence.next)\n      } else if (sequence.next) {\n        result += '-> ' + convertId(sequence.next) + '\\n'\n      } else {\n        result += '-> END\\n'\n      }\n    }\n  }\n\n  // writing functions to access textvars as list\n  for (let {inkVar, values=[]} of textvarVarsAsArray) {\n    let varValues = ''\n    let idx = 0\n    for (let val of values) {\n      varValues += `\\n\\t- ${idx}: ${val.text}`\n      ++idx\n    }\n    result += `\\n\\n=== function ${inkVar}_func(val)\\n{ val:${varValues}\\n}`\n  }\n\n  return result\n}\n","export const convertId = (id, prefix = 'story') => {\n  if (!id) {\n    return null\n  }\n  const pre = prefix ? prefix + '_' : ''\n  return pre + id.replace(/-/gi, '_')\n}\n\nexport const cleanContent = (content) => {\n  return content\n    .replace(/<span class=\"ql-moikivar\"([^<]+)<\\/span>/gim, '<data class=\"ql-moikivar\"$1<\\/data>')\n    .replace(/\\u200C/gim, '')\n    .replace(/(<\\/*(strong|b)>)/gi, '')\n    .replace(/(<\\/*(em)>)/gi, '')\n    .replace(/(<\\/*(h\\d)>)/gi, '')\n    .replace(/<span class=\"ql-cursor\">/gi, '')\n    .replace(/<\\/p>/gi, '</p> ')\n    .replace(/<\\/*p>/gi, '')\n    .replace(/(<\\/*(span)>)/gi, '')\n    .replace(/(\\s)+/gi, ' ')\n    .replace(/©/gim, '(c)')\n    .replace(/@/gim, '@@64')\n    .replace(/\\^/gim, '@@94')\n    .replace(/\\\\/gim, '@@92')\n    .replace(/~/gim, '@@126')\n    .replace(/°/gim, ' ') // FIXME! the @@225 code seems to not work (even with the \"Zcharacter table + '@{00B0}';\" directive)\n    .replace(/\\s*<br\\s*\\/*>(\\s|&nbsp;)*/gi, '^')\n    .replace(/(\\s)*&nbsp;(\\s)*/gi, ' ') // maybe: [unicode 160] ?\n    .replace(/(\"|“|”)/gim, '~')\n    .replace(/’/gim, '\\'')\n    .replace(/…/gim, '...')\n    .trim()\n}\n\nexport const escapeText = (s) => {\n  return s\n    .replace(/~/gim, '@@126')\n    .replace(/(\"|“|”)/gim, '~')\n}\n\nexport const informDefaultSettings = {\n  lang: 'fr',\n  encoding: 'utf8',\n  asciiOnly: true,\n  clsPattern: '--', // used in v3 as separator (because the lack of clear screen function)\n  disablePauseOnActions: false,\n  disablePauseOnSimpleSequence: false,\n  disablePauseOnGameOver: false,\n  disableClearScreenOnChoice: false,\n  preferSeparatorThanCls: false\n}\n\nexport const DEFAULT_STRINGS_FR = {\n  HEADER: 'Cette histoire a été exportée avec Moiki Exporter.^La version originelle est accessible ici :',\n  MOIKI_PRESENTS: 'Moiki présente :',\n  A_STORY_BY: 'Une histoire de',\n  COLON: ' :',\n  CMD_HELP: 'AIDE',\n  CMD_UNDO: 'RETOUR',\n  CMD_REDO: 'REFAIRE',\n  CMD_LIST: 'LISTE',\n  CMD_SHOW: 'REVOIR',\n  CMD_EXIT: 'QUITTER',\n  CMD_YES: 'oui',\n  CMD_YES_SHORT: 'o',\n  CMD_NO: 'non',\n  CMD_NO_SHORT: 'n',\n  NOCHOICE_MATCH: 'Cette saisie ne correspond à aucun choix !',\n  LIST_OF_COMMANDS: 'Liste des commandes',\n  //BACK_TO_PREVIOUS: 'Retourner au choix précédent',\n  RESTART_GAME: 'Recommencer depuis le début',\n  LIST_OBJECTS: 'Lister les objets récupérés',\n  RESHOW_TEXT: 'Afficher le texte de la dernière séquence',\n  QUIT: 'Quitter',\n  BYE_BYE: 'Bye-bye !',\n  CONFIRM_RESTART: 'Recommencer depuis le début ?',\n  INVENTORY_LIST: `Liste des objets de l'inventaire :`,\n  INVENTORY_EMPTY: 'Votre inventaire est vide !',\n  OBJECT_WON: 'Objet récupéré : ',\n  OBJECT_LOST: 'Objet perdu : ',\n  COUNTER_SET: ' vaut maintenant : ',\n  COUNTER_ADD: ' augmente de ',\n  COUNTER_SUB: ' diminue de ',\n  WIN_GAME: 'Gagné !',\n  LOSE_GAME: 'Perdu !',\n  COMMAND_UNKNOWN_LEFT: 'Cette commande est inconnue ! Tapez ~',\n  COMMAND_UNKNOWN_RIGHT: '~ pour une liste des commandes disponibles.',\n  DEFAULT_CONFIRM_MSG: `Etes-vous sûr de vouloir faire cette action ?`,\n  AND: 'et',\n  OR: 'ou',\n  PLEASE_ANSWER: `Veuillez répondre par `,\n  ANOTHER_GAME: `Lancer une autre partie ?`\n}\n\nexport const DEFAULT_STRINGS_EN = {\n  HEADER: 'This story was exported with Moiki Exporter.^The original version is avalaible here:',\n  MOIKI_PRESENTS: 'Moiki presents :',\n  A_STORY_BY: 'A story by',\n  COLON: ':',\n  CMD_HELP: 'HELP',\n  CMD_UNDO: 'UNDO',\n  CMD_REDO: 'REDO',\n  CMD_LIST: 'LIST',\n  CMD_SHOW: 'SHOW',\n  CMD_EXIT: 'EXIT',\n  CMD_YES: 'yes',\n  CMD_YES_SHORT: 'y',\n  CMD_NO: 'no',\n  CMD_NO_SHORT: 'n',\n  NOCHOICE_MATCH: 'This entry does not correspond to any choice!',\n  LIST_OF_COMMANDS: 'List of commands',\n  //BACK_TO_PREVIOUS: 'Back to previous choice',\n  RESTART_GAME: 'Restart the game',\n  LIST_OBJECTS: 'List of items won',\n  RESHOW_TEXT: 'Show the text of the last sequence',\n  QUIT: 'Quit the game',\n  BYE_BYE: 'Bye bye!',\n  CONFIRM_RESTART: 'Restart from the beginning?',\n  INVENTORY_LIST: `List of items in inventory:`,\n  INVENTORY_EMPTY: 'Inventory is empty!',\n  OBJECT_WON: 'Item won : ',\n  OBJECT_LOST: 'Item lost : ',\n  COUNTER_SET: ' is now: ',\n  COUNTER_ADD: ' increases by ',\n  COUNTER_SUB: ' decreases by ',\n  WIN_GAME: 'Won!',\n  LOSE_GAME: 'Lost!',\n  COMMAND_UNKNOWN_LEFT: 'This command is unknown! Type ~',\n  COMMAND_UNKNOWN_RIGHT: '~ for a list of available commands.',\n  DEFAULT_CONFIRM_MSG: `Are you sure you want to take this action?`,\n  AND: 'and',\n  OR: 'or',\n  PLEASE_ANSWER: `Please answer `,\n  ANOTHER_GAME: `Start another game?`\n}\n\nexport const stringsForItems = ['INVENTORY_EMPTY', 'INVENTORY_LIST', 'CMD_LIST', 'LIST_OBJECTS', 'OBJECT_WON', 'OBJECT_LOST']\n\nexport const SPECIAL_CHARS = ['…', 'ō', '⨭', '⨮', '☼', '¤', '×', '♦', '█', '■', '▄', '▲', '▓', '♥', '◄']","import { convertToInform6 } from './inform6'\n\nexport * as inform6Utils from './inform6-utils'\n\nexport const convertToInform = (story, format, options) => {\n  if (format === 'inform6') {\n    return convertToInform6(story, options)\n  }\n  throw new Error('This format is unvailable!')\n}","/**\nThis export will not use any extra library, just Inform (that means, there is no parser).\n*/\n\nimport kebabCase from 'lodash.kebabcase'\nimport { getHeader, getAuthor } from '../utils'\nimport * as informUtils from './inform6-utils'\n\nexport const convertToInform6 = (story, opts={}) => {\n  const { _id, meta, firstSequence, sequences, assets={}, counters={}, textvars={} } = story\n  const { convertId: idConverter, cleanContent: contentCleaner, SPECIAL_CHARS } = informUtils\n  const settings = {...informUtils.informDefaultSettings, ...opts}\n  const STRINGS = {...(settings.lang === 'fr' ? informUtils.DEFAULT_STRINGS_FR : informUtils.DEFAULT_STRINGS_EN), ...(settings.strings || {})}\n\n  const writeStyle = (style, tabs=1) => `#IfV5; style ${style}; #EndIf;\\n${'  '.repeat(tabs)}`\n  const bold = (tabs) => writeStyle('bold', tabs)\n  //const reverse = (tabs) => writeStyle('reverse', tabs)\n  const underline = (tabs) => writeStyle('underline', tabs)\n  const roman = (tabs) => writeStyle('roman', tabs)\n\n  /*\n  @overriding cleanContent\n  This part allows to manage special chars that need to be declared in Ztable\n  */\n  const specialChars = new Set([])\n  const cleanContent = (str) => {\n    const cleaned = contentCleaner(str)\n    let cleanedAndConverted = settings.asciiOnly ? '' : cleaned\n    let charCode\n    for (let chr of cleaned) {\n      charCode = chr.charCodeAt(0)\n      if (charCode > 255 && !settings.asciiOnly) {\n        specialChars.add(charCode.toString(16))\n      } else if (settings.asciiOnly) {\n        if (charCode > 127 && charCode < 255) {\n          specialChars.add(charCode.toString(16))\n          cleanedAndConverted += chr\n        } else {\n          cleanedAndConverted += charCode > 255 ? '?' : chr\n        }\n      }\n    }\n    return cleanedAndConverted\n  }\n  const writeSpecialCharsRoutine = () => {\n    const specialCharsArray = Array.from(specialChars)\n    const zCharTableKind = settings.asciiOnly ? 'Zcharacter table +' : 'Zcharacter table'\n    if (specialCharsArray.length > 0) {\n      return `\\n${zCharTableKind} ${specialCharsArray.map(x => `'@{${x}}'`).join(' ')};\\n`\n    } else {\n      return ''\n    }\n  }\n\n  /*\n  @overriding convertId\n  This part allows to fix issue for names that exceeds the maximum length of 32 characters\n  */\n  const cuttedIds = {}\n  const sliceIndexes = {}\n  const convertId = (id, prefix) => {\n    const convertedId = idConverter(id, prefix)\n    if (convertedId.length >= 20) {\n      if (!cuttedIds[convertedId]) {\n        const slicedId = convertedId.slice(0, 18) + '_C'\n        if (!sliceIndexes[slicedId]) {\n          sliceIndexes[slicedId] = 1\n        } else {\n          sliceIndexes[slicedId] = (sliceIndexes[slicedId] + 1)\n        }\n        cuttedIds[convertedId] = slicedId + sliceIndexes[slicedId]\n      }\n      return cuttedIds[convertedId]\n    }\n    return convertedId\n  }\n\n  const objectVariables = {}\n  for (const [idx, asset] of assets.entries()) {\n    objectVariables[asset.id] = {\n      identifier: '_' + convertId(kebabCase(asset.label), '') + '_' + (idx + 1),\n      ...asset\n    }\n  }\n  const objectVarsAsArray = Object.entries(objectVariables).map(([_, data]) => data)\n\n  const counterVariables = {}\n  for (const [idx, counter] of counters.entries()) {\n    counterVariables[counter.id] = {\n      identifier: '_' + convertId(kebabCase(counter.name), '') + '_' + (idx + 1),\n      value: counter.defaultValue || 0,\n      ...counter\n    }\n  }\n  const counterVarsAsArray = Object.entries(counterVariables).map(([_, data]) => data)\n\n  const textvarVariables = {}\n  for (const [idx, textvar] of textvars.entries()) {\n    textvarVariables[textvar.id] = {\n      identifier: '_' + convertId(kebabCase(textvar.name), '') + '_' + (idx + 1),\n      value: textvar.defaultValue || 0,\n      ...textvar\n    }\n  }\n  const textvarVarsAsArray = Object.entries(textvarVariables).map(([_, data]) => data)\n\n  const extractPassageFromConditions = (conditions) => {\n    const passages = []\n    if (conditions && conditions.length > 0) {\n      for (let c of conditions) {\n        const {kind, query: {params}} = c\n        if (kind === 'passage') {\n          const [{target}] = params\n          passages.push(target)\n        } else if (kind === 'multiple') {\n          for (let p of params) {\n            const {kind, target} = p\n            if (kind === 'passage') {\n              passages.push(target)\n            }\n          }\n        }\n      }\n    }\n    return passages\n  }\n\n  const sequenceUsedInConditions = []\n  for (let sequence of sequences) {\n    if (sequence.choices && sequence.choices.length > 0) {\n      for (let ch of sequence.choices) {\n        sequenceUsedInConditions.push(...extractPassageFromConditions(ch.conditions))\n        if (ch.showCondition && ch.showCondition.kind) {\n          sequenceUsedInConditions.push(...extractPassageFromConditions([ch.showCondition]))\n        }\n      }\n    } else {\n      sequenceUsedInConditions.push(...extractPassageFromConditions(sequence.conditions))\n    }\n  }\n  const uniquePassages = Array.from(new Set(sequenceUsedInConditions))\n  const passageVarsAsArray = uniquePassages.map(x => convertId(x))\n  \n\n  const convertObjectCondition = (condition, target) => {\n    switch (condition) {\n      case 'with': return `hasItem(${objectVariables[target].identifier})`\n      case 'without': return `~~hasItem(${objectVariables[target].identifier})`\n      default: console.warn('This type of object condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertCounterCondition = (condition, target, value) => {\n    if (isNaN(value) || typeof value !== 'number') {\n      console.warn('The value of this counter condition is invalid:', value)\n      return null\n    }\n    switch (condition) {\n      case '=': return `${counterVariables[target].identifier} == ${value}`\n      case '!=': return `${counterVariables[target].identifier} ~= ${value}`\n      case '<': case '<=': case '>': case '>=': {\n        return `${counterVariables[target].identifier} ${condition} ${value}`\n      }\n      default: console.warn('This type of counter condition is unknown:', condition)\n    }\n    return null\n  }\n\n\n  const getTextvarValueIndex = (target, value) => {\n    const foundTextvar = textvarVariables[target]\n    if (foundTextvar && foundTextvar.values) {\n      const foundValue = foundTextvar.values.findIndex(x => x.id === value)\n      if (foundValue) {\n        return foundValue + 1\n      }\n    }\n    return 1\n  }\n\n  const convertTextvarCondition = (condition, target, value) => {\n    switch (condition) {\n      case '=': return `${textvarVariables[target].identifier}_VAL == ${getTextvarValueIndex(target, value)}`\n      case '!=': return `${textvarVariables[target].identifier}_VAL ~= ${getTextvarValueIndex(target, value)}`\n      default: console.warn('This type of textvar condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertPassageCondition = (condition, target) => {\n    switch (condition) {\n      case 'by': return `userPassages-->PSG_${convertId(target)} == 1`\n      case 'not-by': return `userPassages-->PSG_${convertId(target)} == 0`\n      default: console.warn('This type of passage condition is unknown:', condition)\n    }\n    return null\n  }\n\n  const convertMultipleCondition = (allConditions) => {\n    const res = []\n    for (let c of allConditions) {\n      const {kind, condition, target, value} = c\n      switch (kind) {\n        case 'object': res.push(convertObjectCondition(condition, target)); break\n        case 'counter': res.push(convertCounterCondition(condition, target, value)); break\n        case 'textvar': res.push(convertTextvarCondition(condition, target, value)); break\n        case 'passage': res.push(convertPassageCondition(condition, target)); break\n        default: {\n          console.warn('This type of multiple condition is unknown:', kind)\n        }\n      }\n    }\n    return res.filter(x => x !== null).map(x => `(${x})`)\n  }\n\n  const convertShowCondition = (showCondition) => {\n    const {kind, query: {operator, params}} = showCondition\n    const [{target, condition, value}] = params\n    switch (kind) {\n      case 'object': return convertObjectCondition(condition, target)\n      case 'counter': return convertCounterCondition(condition, target, value)\n      case 'textvar': return convertTextvarCondition(condition, target, value)\n      case 'passage': return convertPassageCondition(condition, target)\n      case 'multiple': {\n        const multiCond = convertMultipleCondition(params)\n        const joiner = operator === 'and' ? ' && ' : ' || '\n        return multiCond ? multiCond.join(joiner) : null\n      }\n      default: {\n        console.warn('This kind of condition is unknown:', kind)\n      }\n    }\n  }\n\n  const convertConditions = (conditions) => {\n    const listConditions = []\n    for (let c of conditions) {\n      const {kind, next, query: {operator, params}} = c\n      const [{target, condition, value}] = params\n      switch (kind) {\n        case 'object': {\n          const objCondition = convertObjectCondition(condition, target)\n          objCondition && listConditions.push(`if (${objCondition}) return ${convertId(next)};`)\n          break\n        }\n        case 'counter': {\n          const counterCond = convertCounterCondition(condition, target, value)\n          counterCond && listConditions.push(`if (${counterCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'textvar': {\n          const textvarCond = convertTextvarCondition(condition, target, value)\n          textvarCond && listConditions.push(`if (${textvarCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'passage': {\n          const psgCond = convertPassageCondition(condition, target)\n          psgCond && listConditions.push(`if (${psgCond}) return ${convertId(next)};`)\n          break\n        }\n        case 'multiple': {\n          const multiCond = convertMultipleCondition(params)\n          const joiner = operator === 'and' ? ' && ' : ' || '\n          multiCond && listConditions.push(`if (${multiCond.join(joiner)}) return ${convertId(next)};`)\n          break\n        }\n        default: {\n          console.warn('This kind of condition is unknown:', kind)\n        }\n      }\n    }\n    return listConditions\n  }\n\n  const convertActions = (actions) => {\n    const listActions = []\n    for (let act of actions) {\n      const {kind, params: {target, modifier, value}} = act\n      switch (kind) {\n        // modifier = toggle, add, sub\n        case 'object': listActions.push(`${modifier}Item(${objectVariables[target].identifier});`); break\n        // modifier = set, add, sub\n        case 'counter': listActions.push(`${modifier}Counter(${counterVariables[target].identifier}, ${value});`); break\n        // modifier = set\n        case 'textvar': listActions.push(`${textvarVariables[target].identifier}_VAL = ${getTextvarValueIndex(target, value)};`); break\n        default: {\n          console.warn('This kind of action is unknown:', kind)\n        }\n      }\n    }\n    return listActions\n  }\n\n  const getChoiceLinkValue = (choice) => {\n    if (choice.actions && choice.actions.length > 0) {\n      return [\n        ...convertActions(choice.actions),\n        `return ${convertId(choice.next)};`\n      ]\n    } else if (choice.conditions && choice.conditions.length > 0) {\n      return [\n        ...convertConditions(choice.conditions),\n        `return ${convertId(choice.next)};`\n      ]\n    } else {\n      return [ \n        `return ${convertId(choice.next)};`\n      ]\n    }\n  }\n\n  const convertContentVars = (s) => {\n    const regex = /<data class=~ql-moikivar~([^<]+)<\\/data>/gim\n    const regexId = /data-var-id=~([A-Za-z0-9-]+)~ data-var-op=~([a-z]+)~/\n    const replacers = []\n  \n    let matches\n    while ((matches = regex.exec(s)) !== null) {\n      const foundId = matches[0].match(regexId)\n      if (foundId && foundId.length > 1) {\n        const counter = counterVariables[foundId[1]] //allCounters.find(x => x.id === foundId[1]) || story.counters[foundId[1]]\n        const textvar = textvarVariables[foundId[1]] //allTextvars.find(x => x.id === foundId[1]) || story.textvars[foundId[1]]\n        const op = foundId[2] || 'value'\n        let value = ''\n        if (counter) {\n          switch (op) {\n            case 'percent': {\n              value = `\", ${counter.identifier}, \"`\n              // TODO : that does not work... (not strange at all)\n              // value = `\";\\n  print ((${counter.identifier} - getCounterMin(${counter.identifier})) / (getCounterMax(${counter.identifier}) - getCounterMin(${counter.identifier}))) * 100;\\n  print \"%`\n              break\n            }\n            default: {\n              value = `\", ${counter.identifier}, \"`\n            }\n          }\n        } else if (textvar) {\n          switch (op) {\n            case 'random': {\n              value = `\";\\n  getTextvarValue(${textvar.identifier}, random(${textvar.identifier}_NUMVALUES));\\n  print \"`\n              break\n            }\n            default: {\n              value = `\";\\n  getTextvarValue(${textvar.identifier}, ${textvar.identifier}_VAL);\\n  print \"`\n            }\n          }\n        }\n        replacers.push({from: matches[0], to: value})\n      }\n    }\n    let converted = s\n    for (let i=0; i<replacers.length; ++i) {\n      converted = converted.replace(replacers[i].from, replacers[i].to)\n    }\n    return converted\n  }\n\n  const getNodeDescription = (sequence) => {\n    let statements = null\n    const listVars = []\n    const text = convertContentVars(cleanContent(sequence.content))\n    if (sequence.puzzle) {\n      listVars.push('code')\n      // puzzle sequence \n      const codesCheck = []\n      for (let code of sequence.puzzle.codes) {\n        codesCheck.push(\n          `if (isCommand(\"${code.value}\")) {`,\n          `  return ${convertId(code.next)};`,\n          `}`\n        )\n      }\n      statements = [\n        `print \"${text}\";`,\n        `code = getInputCode();`,\n        ...codesCheck,\n        `return ${convertId(sequence.puzzle.defaultNext)};`\n      ]\n    } else if (sequence.next && (!sequence.choices || sequence.choices.length === 0)) {\n      // simple sequence\n      if (sequence.actions && sequence.actions.length > 0) {\n        statements = [\n          `print \"${text}^^\";`,\n          ...convertActions(sequence.actions),\n          `return ${convertId(sequence.next)};`\n        ]\n      } else if (sequence.conditions && sequence.conditions.length > 0) {\n        statements = [\n          `print \"${text}\";`,\n          !settings.disablePauseOnSimpleSequence && `wait();`,\n          ...convertConditions(sequence.conditions),\n          `return ${convertId(sequence.next)};`\n        ]\n      } else {\n        statements = [\n          `print \"${text}\";`,\n          !settings.disablePauseOnSimpleSequence && `wait();`,\n          `return ${convertId(sequence.next)};`\n        ]\n      }\n    } else if (sequence.choices && sequence.choices.length > 0) {\n      // choice sequence\n      const choicesDescription = []\n      const choicesLinks = []\n      let mapLinks = []\n      let choiceIndex = 0\n      const hasShowConditions = sequence.choices.filter(c => c.showCondition && c.showCondition.kind).length > 0\n      if (hasShowConditions) {\n        listVars.push('choice', 'numVisibleChoices')\n        for (let choice of sequence.choices) {\n          const choiceContent = convertContentVars(cleanContent(choice.content))\n          const showCond = choice.showCondition && choice.showCondition.kind ? convertShowCondition(choice.showCondition) : false\n          if (showCond) {\n            choicesDescription.push(\n              `if (${showCond}) {`,\n              `  numVisibleChoices = numVisibleChoices + 1;`,\n              `  userChoices-->${(choiceIndex + 1)} = numVisibleChoices;`,\n              `  print \"- (\", numVisibleChoices, \"). ${choiceContent}^\";`,\n              `}`\n            )\n          } else {\n            choicesDescription.push(\n              `numVisibleChoices = numVisibleChoices + 1;`,\n              `userChoices-->${(choiceIndex + 1)} = numVisibleChoices;`,\n              `print \"- (\", numVisibleChoices, \"). ${choiceContent}^\";`\n            )\n          } \n          choicesLinks.push(getChoiceLinkValue(choice))\n          ++choiceIndex\n        }\n        mapLinks = choicesLinks.map((link, i) => `if (choice == userChoices-->${(i + 1)}) {\\n    ${link.join('\\n    ')}\\n  }`)\n        statements = [\n          `numVisibleChoices = 0;`,\n          `print \"${text}^^\";`,\n          ...choicesDescription,\n          `choice = getInputChoice(numVisibleChoices);`,\n          ...mapLinks\n        ]\n      } else {\n        listVars.push('choice')\n        for (let choice of sequence.choices) {\n          const choiceContent = cleanContent(choice.content)\n          choicesDescription.push(`print \"- ${(choiceIndex + 1)}. ${choiceContent}^\";`)\n          choicesLinks.push(getChoiceLinkValue(choice))\n          ++choiceIndex\n        }\n        mapLinks = choicesLinks.map((link, i) => `if (choice == ${ i + 1 }) {\\n    ${link.join('\\n    ')}\\n  }`)\n        statements = [\n          `print \"${text}^^\";`,\n          ...choicesDescription,\n          `choice = getInputChoice(${choicesLinks.length});`,\n          ...mapLinks\n        ]\n      }\n    } else {\n      // final sequence\n      statements = [\n        `print \"${text}^\";`,\n        !settings.disablePauseOnGameOver && `wait();`,\n        `gameOver = ${ sequence.isHappyEnd ? '1' : '2'};`,\n        `return nothing;`\n      ]\n    }\n    const seqId = convertId(sequence.id)\n    if (passageVarsAsArray.includes(seqId)) {\n      statements = [`userPassages-->PSG_${seqId} = 1;`, ...statements]\n    }\n    \n    return {\n      statements: statements.filter(s => !!s).join('\\n  '),\n      vars: listVars\n    }\n  }\n\n  const onAfterChoice = settings.preferSeparatorThanCls ? 'print (string) CLS_PATTERN, \"^\";' : 'cls();'\n\n  const moikiInformLibrary = `! This file contains the necessary core for the Moiki export to Inform6\n! kaelhem (c) 2021\n! kaelhem at gmail com\n\n\n! Inform settings\n! -------------------------------------------\n\nGlobal location = DefaultRoomForStatusBar; ! Must be the first global to show location name\nGlobal status_field_1 = 0; ! Must be the second global to show score or hours\nGlobal status_field_2 = 0; ! Must be the third global to show turns or minutes\n\n! Variables for game management\n! -------------------------------------------\n! Array path --> 10; ! allow 10 undo moves, but it's not implemented yet...\nGlobal markForRedo = 0; ! used to restart game from beginning\nGlobal markForShow = 0; ! used to re-display sequence text\nGlobal gameOver = 0;\n\n#IfV3;\n  Constant ARRAY_LEN_OFFSET = 2;\n#IfNot;\n  Constant ARRAY_LEN_OFFSET = 3;\n#EndIf;\n\n! Choices management (used for visibility conditions of choices)\n! -------------------------------------------\n\nConstant MAX_CHOICES = 6;\nArray userChoices --> (ARRAY_LEN_OFFSET + MAX_CHOICES);\n\n[ clearChoices i;\n  for (i=1: i<=MAX_CHOICES: i++) {\n    userChoices-->i = 0;\n  }\n  return;\n];\n\n${ objectVarsAsArray.length > 0 ? (\n`! Items management\n! -------------------------------------------\n\nArray userItems --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_ITEMS);\n\n[ clearItems i;\n  for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n    userItems-->i = 0;\n  }\n  return;\n];\n\n[ addItem index;\n  if (userItems-->index == 0) {\n    toggleItem(index);\n  }\n  return;\n];\n\n[ subItem index;\n  if (userItems-->index == 1) {\n    toggleItem(index);\n  }\n  return;\n];\n\n[ hasItem index;\n  return userItems-->index == 1;\n];\n\n[ toggleItem index;\n  ${ bold() }if (userItems-->index == 0) {\n    userItems-->index = 1;\n    ++status_field_1;\n    print (string) STR_OBJECT_WON;\n  } else {\n    userItems-->index = 0;\n    --status_field_1;\n    print (string) STR_OBJECT_LOST;\n  }\n  print (string) getItemDescription(index);\n  ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }return;\n];\n\n[ countItems i count;\n  count = 0;\n  for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n    if (userItems-->i == 1) ++count;\n  }\n  return count;\n];\n`) : ''}\n\n${ counterVarsAsArray.length > 0 ? (\n`! Counters management\n! -------------------------------------------\n\nArray userCounters --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_COUNTERS);\n\n[ clearCounters i;\n  for (i=1: i<=COUNT_TOTAL_COUNTERS: i++) {\n    userCounters-->i = defaultCounterValue(i);\n  }\n  return;\n];\n\n[ setCounter index value;\n  userCounters-->index = value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_SET, value;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n\n[ addCounter index value;\n  userCounters-->index = userCounters-->index + value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_ADD, value, \" \", (string) STR_AND, (string) STR_COUNTER_SET, userCounters-->index;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n\n[ subCounter index value;\n  userCounters-->index = userCounters-->index - value;\n  if (isCounterGauge(index)) {\n    ${ bold() }print (string) getCounterName(index), (string) STR_COUNTER_SUB, value, \" \", (string) STR_AND, (string) STR_COUNTER_SET, userCounters-->index;\n    ${ roman() }${ !settings.disablePauseOnActions ? 'wait();\\n  ' : '' }\n  }\n  return;\n];\n`) : ''}\n\n${ textvarVarsAsArray.length > 0 ? (\n`! Textvars management\n! -------------------------------------------\n\n[ clearTextvars;\n  ${ true && textvarVarsAsArray.map(v => v.identifier + '_VAL = 1;').join('\\n')}\n  return;\n];\n\n`) : ''}\n\n${ passageVarsAsArray.length > 0 ? (\n`! Passages management (for conditions only)\n! -------------------------------------------\n\nArray userPassages --> (ARRAY_LEN_OFFSET + COUNT_TOTAL_PASSAGES);\n\n[ clearPassages i;\n  for (i=1: i<=COUNT_TOTAL_PASSAGES: i++) {\n    userPassages-->i = 0;\n  }\n  return;\n];\n`) : ''}\n\n! Manage user inputs\n! -------------------------------------------\n\n! fix: in z-code v3, input buffers are not formatted the same way...\n#IfV3;\n  Constant arrayStartIndex 1;\n  [ length arr len;\n    len = 0;\n    while (arr->(len+1) ~= 0) ++len;\n    return len;\n  ];\n#Ifnot;\n  Constant arrayStartIndex 2;\n  [ length arr;\n    return arr->1;\n  ];\n#EndIf;\n\n! read user inputs\n[ KeyLine buffer;\n  buffer->0 = 10;\n  read buffer 0;\n  return buffer;\n];\n\n! convert a string into array\n[ toArray str arr;\n  @output_stream 3 arr;\n  @print_paddr str;\n  @output_stream -3;\n  return arr;\n];\n\n! take a char and return the same in lower case\n[ toLowerCase c;\n  if (c >= 'A' && c <= 'Z') return c + 32; else return c;\n];\n\n! return true if the given command as string match the current input buffer\n[isCommand cmd aCmd i;\n  aCmd = toArray(cmd);\n  if (aCmd-->0 == length(key)) {\n    for (i=0: i<aCmd-->0: i++) {\n      if (key->(arrayStartIndex+i) ~= toLowerCase(aCmd->(2+i))) rfalse;\n    }\n    rtrue;\n  }\n  rfalse;\n];\n\n! store user input\nArray key -> 13;\n\n! read user code\n[ getInputCode;\n  do {\n    print \"> \";\n  } until(KeyLine(key)-->0);\n  return key;\n];\n\n! read user choices / menu commands\n[ getInputChoice numChoices len chNum commandUnknown done;\n  done = false;\n  do {\n    commandUnknown = false;\n    do {\n      print \"> \";\n    } until(KeyLine(key)-->0);\n    len = length(key);\n    if (len == 1) {\n      chNum = key->arrayStartIndex - 48;\n      if (chNum > 0 && chNum <= numChoices) {\n        ${ !settings.disableClearScreenOnChoice ? '' + onAfterChoice + '\\n        ' : '' }done = true;\n      } else if (chNum > 0 && chNum <= 10) {\n        print (string) STR_NOCHOICE_MATCH, \"^\";\n      } else {\n        commandUnknown = true;\n      }\n    } else if (isCommand(STR_CMD_HELP)) {\n      showHelp();\n    } else if (isCommand(STR_CMD_UNDO)) {\n      undo();\n    } else if (isCommand(STR_CMD_REDO)) {\n      if (redo()) return 0;\n    } else if (isCommand(STR_CMD_EXIT)) {\n      exit();\n    } else if (isCommand(STR_CMD_SHOW)) {\n      markForShow = 1;\n      return 0;${ objectVarsAsArray.length > 0 ? '\\n    } else if (isCommand(STR_CMD_LIST)) {\\n      inventory();\\n    ' : '' }\n    } else {\n      commandUnknown = true;\n    }\n    if (commandUnknown) {\n      print (string) STR_COMMAND_UNKNOWN_LEFT, (string) STR_CMD_HELP, (string) STR_COMMAND_UNKNOWN_RIGHT, \"^\";\n    }\n  } until(done);\n  return chNum;\n];\n\n[ confirm question ok done;\n  done = false;\n  ok = false;\n  do {\n    do {\n      if (question) {\n        print (string) question;\n      } else {\n        print (string) STR_DEFAULT_CONFIRM_MSG;\n      }\n      print \" (\", (string) STR_CMD_YES, \"/\", (string) STR_CMD_NO, \")^> \";\n    } until(KeyLine(key)-->0);\n    if (isCommand(STR_CMD_YES) || isCommand(STR_CMD_YES_SHORT)) {\n      ok = true;\n      done = true;\n    } else if (isCommand(STR_CMD_NO) || isCommand(STR_CMD_NO_SHORT)) {\n      done = true;\n    }\n    if (~~done) {\n      print (string) STR_PLEASE_ANSWER, (string) STR_CMD_YES, \" \", (string) STR_OR, \" \", (string) STR_CMD_NO,\".^\";\n    }\n  } until(done);\n  return ok;\n];\n\n[ cls;\n  #IfV3;\n    ! in v3 it seems there is no way to clear the screen...\n    print (string) CLS_PATTERN, \"^\";\n  #Ifnot;\n    @erase_window -1; ! this opcode is not available in V3\n  #EndIf;\n  rtrue;\n];\n\n[ wait x;\n  #IfV3;\n    read key 0;\n  #Ifnot;\n    @read_char 1 x; ! this opcode is not available in V3\n    print \"^\";\n  #EndIf;\n];\n\n\n! Menu\n! -------------------------------------------\n\n[ showHelp;\n  ${ underline() }print (string) STR_LIST_OF_COMMANDS, \"^\";\n  ${ roman() }! print \"  - \", (string) STR_CMD_UNDO, (string) STR_COLON, \" \", (string) STR_BACK_TO_PREVIOUS, \"^\";\n  print \"  - \", (string) STR_CMD_REDO, (string) STR_COLON, \" \", (string) STR_RESTART_GAME, \"^\";\n  print \"  - \", (string) STR_CMD_SHOW, (string) STR_COLON, \" \", (string) STR_RESHOW_TEXT, \"^\";\n  print \"  - \", (string) STR_CMD_EXIT, (string) STR_COLON, \" \", (string) STR_QUIT, \"^\";\n  ${ objectVarsAsArray.length > 0 ? 'print \"  - \", (string) STR_CMD_LIST, (string) STR_COLON, \" \", (string) STR_LIST_OBJECTS, \"^\";\\n  ' : '' }rtrue;\n];\n\n[ exit;\n  print (string) STR_BYE_BYE, \"^\";\n  @quit;\n];\n\n[ undo;\n  print \"Undo: not implemented yet !^\";\n  rtrue;\n];\n\n[ redo;\n  if (confirm(STR_CONFIRM_RESTART)) {\n    markForRedo = 1;\n    rtrue;\n  }\n  rfalse;\n];\n${ objectVarsAsArray.length > 0 ? (`\n[ inventory i;\n  if (countItems() == 0) {\n    print (string) STR_INVENTORY_EMPTY, \"^\";\n  } else {\n    ${ underline(2) }print (string) STR_INVENTORY_LIST, \"^\";\n    ${ roman(2) }for (i=1: i<=COUNT_TOTAL_ITEMS: i++) {\n      if (hasItem(i)) print \"* \", (string) getItemDescription(i), \"^\";\n    }\n  }\n  rtrue;\n];\n`) : '' }\n\n! Presentation\n! -------------------------------------------\n\n[ startScreen;\n  ${ underline() }print (string) STR_HEADER, \" \", (string) STORY_URL, \"^^\";\n  ${ roman() }print (string) STR_MOIKI_PRESENTS, \"^\";\n  ${ bold() }print (string) STORY_TITLE, \"^^\";\n  ${ roman() }print (string) STR_A_STORY_BY, \" \", (string) STORY_AUTHOR, \"^^\", (string) STORY_DESCRIPTION, \"^\";\n  rtrue;\n];\n\n\n! Game loop\n! -------------------------------------------\n[ mainLoop firstSequence next res;\n  next = firstSequence;\n  do {\n    ++status_field_2; ! increase turn counter\n    res = next();\n    if (markForShow == 1) {\n      markForShow = 0;\n      res = next;\n    }\n    if (markForRedo == 1) {\n      res = false;\n    }\n    next = res;\n    print \"^\";\n  } until(~~next);\n  if (gameOver > 0) {\n    ${ bold(2) }if (gameOver == 1) {\n      print (string) STR_WIN_GAME, \"^^\";\n    } else if (gameOver == 2) {\n      print (string) STR_LOSE_GAME, \"^^\";\n    }\n    ${ roman(2) }gameOver = 0;\n  }\n];\n\n[ startGame firstSequence replay;\n  startScreen();\n  wait();\n  do {\n    cls();\n    replay = false;\n    location = DefaultRoomForStatusBar; ! reset location (avoid compiler warning)\n    status_field_1 = 0; ! reset score\n    status_field_2 = 0; ! reset turns\n    ${ objectVarsAsArray.length > 0 ? `clearItems();` : '' }\n    ${ counterVarsAsArray.length > 0 ? `clearCounters();` : '' }\n    ${ textvarVarsAsArray.length > 0 ? `clearTextvars();` : '' }\n    ${ passageVarsAsArray.length > 0 ? `clearPassages();` : '' }\n    mainLoop(firstSequence);\n    if (markForRedo == 1) {\n      markForRedo = 0;\n      replay = true;\n    } else {\n      if (confirm(STR_ANOTHER_GAME)) {\n        replay = true;\n      } else {\n        exit();\n      }\n    }\n  } until(~~replay);\n];\n`\n  const encoding = settings.encoding === 'utf8' ? '!% -Cu\\n' : ''\n  let moikiInformStory = `${encoding}!% -~S\n!% $OMIT_UNUSED_ROUTINES=1\n%%SPECIAL_CHARS%%\n! ${getHeader(_id).split('\\n').join('\\n! ')}\n\n! author: ${getAuthor(meta)}\n! title: ${cleanContent(meta.name)}\n\nObject DefaultRoomForStatusBar \"${cleanContent(meta.name)}\"; ! used to force name in status line\n\n! Constants\n! -------------------------------------------\nConstant STORY_TITLE = \"${cleanContent(meta.name)}\";\nConstant STORY_DESCRIPTION = \"${cleanContent(meta.description)}\";\nConstant STORY_AUTHOR = \"${cleanContent(getAuthor(meta))}\";\nConstant STORY_URL = \"https://moiki.fr/story/${_id}\";\n\n! Strings\n${Object.entries(STRINGS).filter(([key, value]) => {\n  return !(informUtils.stringsForItems.find(s => s === key) && objectVarsAsArray.length === 0)\n}).map(([key, value]) => `Constant STR_${key} = \"${value}\";`).join('\\n')}\n! Config\nConstant CLS_PATTERN = \"${settings.clsPattern.slice(0, 40).repeat(40).slice(0, 40)}\";\n\n${ objectVarsAsArray.length > 0 ? (`\n! Defines objects / heroes\n!-------------------------------------------\nConstant COUNT_TOTAL_ITEMS = ${objectVarsAsArray.length};\n\n${true && objectVarsAsArray.map((v, i) => 'Constant ' + v.identifier + ' = ' + (i + 1) + ';').join('\\n')}\n\n[ getItemDescription index;\n  switch (index) {\n    ${true && objectVarsAsArray.map(v => v.identifier + ': return \"' + cleanContent(v.label) + ' - ~' + cleanContent(v.desc) + '~\";').join('\\n    ')}\n    default: return \"\";\n  }\n];\n\n`) : ''}\n\n${ counterVarsAsArray.length > 0 ? (`\n! Defines counters\n!-------------------------------------------\nConstant COUNT_TOTAL_COUNTERS = ${counterVarsAsArray.length};\n\n${true && counterVarsAsArray.map((v, i) => 'Constant ' + v.identifier + ' = ' + (i + 1) + ';').join('\\n')}\n\n[ getCounterName index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return \"' + v.name + '\";').join('\\n    ')}\n    default: return \"Undefined counter\";\n  }\n];\n\n[ getCounterMin index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + v.min + ';').join('\\n    ')}\n    default: return 0;\n  }\n];\n\n[ getCounterMax index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + v.max + ';').join('\\n    ')}\n    default: return 1;\n  }\n];\n\n[ defaultCounterValue index;\n  switch (index) {\n    ${true && counterVarsAsArray.map(v => v.identifier + ': return ' + (v.defaultValue || 0) + ';').join('\\n    ')}\n    default: return 0;\n  }\n];\n\n[ isCounterGauge index;\n  switch (index) {\n    ${true && counterVarsAsArray.filter(v => v.gauge).map(v => v.identifier + ': rtrue;').join('\\n    ')}\n    default: return false;\n  }\n];\n\n`) : ''}\n\n${ textvarVarsAsArray.length > 0 ? (`\n! Defines textvars\n!-------------------------------------------\nConstant COUNT_TOTAL_TEXTVARS = ${textvarVarsAsArray.length};\n\n${true && textvarVarsAsArray.map((v, i) => \n  'Constant ' + v.identifier + ' = ' + (i + 1) + ';\\n' +\n  'Constant ' + v.identifier + '_NUMVALUES = ' + v.values.length + ';\\n' + \n  'Global ' + v.identifier + '_VAL = 1;')\n  .join('\\n')\n}\n\n[ getTextvarValue index1 index2;\n  switch (index1) {\n    ${true && textvarVarsAsArray.map((v, i) => (\n      `${v.identifier}:\n      switch (index2) {${v.values.map((val, id) => `\\n        ${(id + 1)}: print \"${informUtils.escapeText(val.text)}\";`).join('')}\n        default: print \"${informUtils.escapeText(v.name)}\";\n      }`\n    ))}\n  }\n];\n\n`) : ''}\n\n${ passageVarsAsArray.length > 0 ? (`\n! Defines passages (used only for conditions)\n!-------------------------------------------\nConstant COUNT_TOTAL_PASSAGES = ${passageVarsAsArray.length};\n\n${true && passageVarsAsArray.map((v, i) => 'Constant PSG_' + v + ' = ' + (i + 1) + ';').join('\\n')}\n\n`) : ''}\n\n! Include MoikInform library\n! ------------------------------------------\nInclude \"moikinform\";\n\n\n! App entry point\n! ------------------------------------------\n[ Main;\n  startGame(${convertId(firstSequence)});\n];\n\n\n! Story sequences\n! ------------------------------------------\n`\n  for (let sequence of sequences) {\n    const { statements, vars } = getNodeDescription(sequence)\n    moikiInformStory += `[ ${convertId(sequence.id)}${vars && vars.length > 0 ? ' ' + vars.join(' ') : ''};\\n  ${statements}\\n];\\n\\n`\n  }\n  return [\n    { filename: 'story.inf', data: moikiInformStory.replace('%%SPECIAL_CHARS%%', writeSpecialCharsRoutine()) },\n    { filename: 'moikinform.h', data: moikiInformLibrary }\n  ]\n}"],"names":["object","callback","fromCommon","story","_id","sequences","themes","assets","sounds","counters","textvars","images","meta","firstSequence","length","id","content","reAsciiWord","reLatin","rsBreakRange","rsMathOpRange","rsBreak","rsDigits","rsLower","rsMisc","rsRegional","rsSurrPair","rsUpper","rsLowerMisc","rsUpperMisc","reOptMod","rsModifier","rsSeq","join","rsEmoji","reApos","RegExp","reComboMark","reUnicodeWord","reHasUnicodeWord","freeSelf","self","Object","root","global","Function","deburrLetter","À","Á","Â","Ã","Ä","Å","à","á","â","ã","ä","å","Ç","ç","Ð","ð","È","É","Ê","Ë","è","é","ê","ë","Ì","Í","Î","Ï","ì","í","î","ï","Ñ","ñ","Ò","Ó","Ô","Õ","Ö","Ø","ò","ó","ô","õ","ö","ø","Ù","Ú","Û","Ü","ù","ú","û","ü","Ý","ý","ÿ","Æ","æ","Þ","þ","ß","Ā","Ă","Ą","ā","ă","ą","Ć","Ĉ","Ċ","Č","ć","ĉ","ċ","č","Ď","Đ","ď","đ","Ē","Ĕ","Ė","Ę","Ě","ē","ĕ","ė","ę","ě","Ĝ","Ğ","Ġ","Ģ","ĝ","ğ","ġ","ģ","Ĥ","Ħ","ĥ","ħ","Ĩ","Ī","Ĭ","Į","İ","ĩ","ī","ĭ","į","ı","Ĵ","ĵ","Ķ","ķ","ĸ","Ĺ","Ļ","Ľ","Ŀ","Ł","ĺ","ļ","ľ","ŀ","ł","Ń","Ņ","Ň","Ŋ","ń","ņ","ň","ŋ","Ō","Ŏ","Ő","ō","ŏ","ő","Ŕ","Ŗ","Ř","ŕ","ŗ","ř","Ś","Ŝ","Ş","Š","ś","ŝ","ş","š","Ţ","Ť","Ŧ","ţ","ť","ŧ","Ũ","Ū","Ŭ","Ů","Ű","Ų","ũ","ū","ŭ","ů","ű","ų","Ŵ","ŵ","Ŷ","ŷ","Ÿ","Ź","Ż","Ž","ź","ż","ž","Ĳ","ĳ","Œ","œ","ŉ","ſ","key","undefined","objectToString","prototype","toString","Symbol","symbolProto","symbolToString","value","isObjectLike","call","isSymbol","result","baseToString","word","index","toLowerCase","string","array","iteratee","accumulator","initAccum","arrayReduce","pattern","guard","test","hasUnicodeWord","match","unicodeWords","asciiWords","words","replace","deburr","getHeader","storyId","Date","toLocaleDateString","weekday","year","month","day","hour","minute","second","getAuthor","author","pseudo","firstname","lastname","vars","cleanTextFn","tree","addLink","to","isBackLink","in","push","allSequencesById","s","choices","choice","conditions","cond","next","chapters","entries","map","data","node","chap","currentId","chain","chainWithActions","actions","params","objectAction","target","kind","chainSum","contentSum","chainObj","trim","actionKind","chainedContent","forEach","seq","convertId","cleanContent","prefix","escapeText","informDefaultSettings","lang","encoding","asciiOnly","clsPattern","disablePauseOnActions","disablePauseOnSimpleSequence","disablePauseOnGameOver","disableClearScreenOnChoice","preferSeparatorThanCls","DEFAULT_STRINGS_FR","HEADER","MOIKI_PRESENTS","A_STORY_BY","COLON","CMD_HELP","CMD_UNDO","CMD_REDO","CMD_LIST","CMD_SHOW","CMD_EXIT","CMD_YES","CMD_YES_SHORT","CMD_NO","CMD_NO_SHORT","NOCHOICE_MATCH","LIST_OF_COMMANDS","RESTART_GAME","LIST_OBJECTS","RESHOW_TEXT","QUIT","BYE_BYE","CONFIRM_RESTART","INVENTORY_LIST","INVENTORY_EMPTY","OBJECT_WON","OBJECT_LOST","COUNTER_SET","COUNTER_ADD","COUNTER_SUB","WIN_GAME","LOSE_GAME","COMMAND_UNKNOWN_LEFT","COMMAND_UNKNOWN_RIGHT","DEFAULT_CONFIRM_MSG","AND","OR","PLEASE_ANSWER","ANOTHER_GAME","DEFAULT_STRINGS_EN","stringsForItems","format","options","opts","idConverter","informUtils","contentCleaner","settings","STRINGS","strings","writeStyle","style","tabs","repeat","bold","underline","roman","specialChars","Set","str","charCode","cleaned","cleanedAndConverted","chr","charCodeAt","add","cuttedIds","sliceIndexes","convertedId","slicedId","slice","objectVariables","idx","asset","identifier","kebabCase","label","objectVarsAsArray","counterVariables","counter","name","defaultValue","counterVarsAsArray","textvarVariables","textvar","textvarVarsAsArray","extractPassageFromConditions","passages","c","query","p","sequenceUsedInConditions","sequence","ch","showCondition","specialCharsArray","passageVarsAsArray","Array","from","x","convertObjectCondition","condition","console","warn","convertCounterCondition","isNaN","getTextvarValueIndex","foundTextvar","values","foundValue","findIndex","convertTextvarCondition","convertPassageCondition","convertMultipleCondition","allConditions","res","filter","convertShowCondition","operator","multiCond","convertConditions","listConditions","objCondition","counterCond","textvarCond","psgCond","convertActions","listActions","act","modifier","getChoiceLinkValue","convertContentVars","matches","regex","regexId","replacers","exec","foundId","op","converted","i","getNodeDescription","statements","listVars","text","puzzle","codesCheck","codes","code","defaultNext","choicesDescription","choicesLinks","mapLinks","choiceIndex","choiceContent","showCond","link","isHappyEnd","seqId","includes","onAfterChoice","moikiInformLibrary","v","moikiInformStory","split","description","find","desc","min","max","gauge","val","filename","convertToInform6","Error","inkVar","convertCondition","addConditions","newLine","inkConditions","strConditions","lf","convertAction","INDENT","convertObjectAction","defaultAction","convertCounterAction","convertTextvarAction","addActions","action","image","varValues","storyVersion","version","simplified","theme","idName","_doc","chAction","chCond","fromV1","fromV2","fromV3"],"mappings":"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"}